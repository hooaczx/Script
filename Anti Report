local __allocated, __allocatedSz = 0, 0;
local sf = string.format;
local clock = os.clock;
local toast = gg.toast;
local sub = string.sub;
denyOpcode = {235};
liby=1 libf=0 libzz="libil2cpp.so"  
libx=gg.getRangesList("libil2cpp.so")
    for i, v in ipairs(libx) do
        if libx[i].state == "Xa" then 
        libz="libil2cpp.so["..liby.."].start" 
        xand=gg.getRangesList("libil2cpp.so")[liby].start 
        libf=1
        break end 
    liby=liby+1
    end 
if libf==0 then 
liby=1 libzz="libUE4.so" 
libx=gg.getRangesList("libUE4.so")
    for i, v in ipairs(libx) do
        if libx[i].state == "Xa" then 
        libz="libUE4.so["..liby.."].start" 
        xand=gg.getRangesList("libUE4.so")[liby].start 
        libf=1 
        break end 
    liby=liby+1
    end 
end 
lib=xand
function quitErr(str)
	str = "Error: " .. str;
	toast(str);
	gg.alert(str);
	print(str);
	os.exit();
end
function PopupBox(Caption, Text)
	if (Text == nil) then
		Text = "";
	end
	gg.alert(Caption .. "\n" .. Text);
end
function isAddrValid(Address)
	if (((Address ~= nil) and (Address ~= 0)) or Address) then
		return true;
	end
	return false;
end
function tohex(Data)
	if (type(Data) == "number") then
		return sf("0x%08X", Data);
	end
	return Data:gsub(".", function(a)
		return string.format("%02X", (string.byte(a)));
	end):gsub(" ", "");
end
function wpm(Address, ggtype, data)
	assert(Address ~= nil, "[wpm]: lỗi, địa chỉ được cung cấp là không.");
	if gg.setValues({{address=Address,flags=ggtype,value=data}}) then
		return true;
	else
		return false;
	end
end
function rpm(Address, ggtype)
	assert(Address ~= nil, "[rpm]: lỗi, địa chỉ được cung cấp là không.");
	res = gg.getValues({{address=Address,flags=ggtype}});
	if (type(res) ~= "string") then
		if (ggtype == gg.TYPE_BYTE) then
			result = res[1].value & 255;
		elseif (ggtype == gg.TYPE_WORD) then
			result = res[1].value & 65535;
		elseif (ggtype == gg.TYPE_DWORD) then
			result = res[1].value & 4294967295;
		elseif (ggtype == gg.TYPE_QWORD) then
			result = res[1].value & 18446744000000000000;
		elseif (ggtype == gg.TYPE_XOR) then
			result = res[1].value & 4294967295;
		else
			result = res[1].value;
		end
		return result;
	else
		return false;
	end
end
function rwmem(Address, SizeOrBuffer)
	assert(Address ~= nil, "[rwmem]: lỗi, địa chỉ được cung cấp là không.");
	_rw = {};
	if (type(SizeOrBuffer) == "number") then
		_ = "";
		for _ = 1, SizeOrBuffer do
			_rw[_] = {address=((Address - 1) + _),flags=gg.TYPE_BYTE};
		end
		for v, __ in ipairs(gg.getValues(_rw)) do
			_ = _ .. string.format("%02X", __.value & 255);
		end
		return _;
	end
	Byte = {};
	SizeOrBuffer:gsub("..", function(x)
		Byte[#Byte + 1] = x;
		_rw[#Byte] = {address=((Address - 1) + #Byte),flags=gg.TYPE_BYTE,value=(x .. "h")};
	end);
	gg.setValues(_rw);
end
oldClock = os.clock();
function notify(str)
	cClock = os.clock() - oldClock;
	if (cClock > 1) then
		posStr = (posStr and (posStr < 3) and (posStr + 1)) or 1;
		toast(str .. ("..."):sub(1, posStr));
		oldClock = os.clock();
	end
end
function initMenu(Menu, prevMenu)
	local title, menuType, cOpt, _opt = Menu[1][1], Menu[1][2], {{},{}};
	for _ = 1, #Menu[2], 2 do
		name, func = Menu[2][_], Menu[2][_ + 1];
		cOpt[1][#cOpt[1] + 1] = ((type(func) == "table") and (name .. " >")) or name;
		cOpt[2][#cOpt[2] + 1] = func;
	end
	cOpt[1][#cOpt[1] + 1] = (prevMenu and ("< Back to " .. prevMenu[1][1])) or "Quit Script";
	while true do
		if gg.isVisible() then
			gg.setVisible(false);
			if menuType then
				_opt = gg.multiChoice(cOpt[1], nil, title);
			else
				_opt = gg.choice(cOpt[1], nil, title);
			end
			if _opt then
				gg.setVisible(true);
				if not menuType then
					efunc = cOpt[2][_opt];
					if efunc then
						if (type(efunc) ~= "table") then
							_curMenuName = cOpt[1][_opt];
							efunc();
							if (_curMenuName ~= cOpt[1][_opt]) then
								cOpt[1][_opt] = _curMenuName;
							end
						else
							initMenu(efunc, Menu);
						end
					else
						return;
					end
				else
					for _ = 1, #cOpt[1] do
						if _opt[_] then
							efunc = cOpt[2][_];
							if efunc then
								if (type(efunc) ~= "table") then
									_curMenuName = cOpt[1][_];
									efunc();
									if (_curMenuName ~= cOpt[1][_]) then
										cOpt[1][_] = _curMenuName;
									end
								else
									gg.setVisible(true);
									initMenu(efunc, Menu);
								end
							else
								return;
							end
						end
					end
				end
			end
		end
		gg.sleep(300);
	end
end
function reverseAddress(address)
	assert(address ~= nil, "\n\n>> [reverseAddress]: lỗi, địa chỉ được cung cấp là không. <<\n\n");
	return ((address & 255) << 24) | ((address & 65280) << 8) | ((address & 16711680) >> 8) | ((address & 4278190080) >> 24);
end
function setjmp(address, target)
	assert(address ~= nil, "\n\n>> [setjmp]: lỗi, địa chỉ được cung cấp là không. <<\n\n");
	assert(address ~= nil, "\n\n>> [setjmp]: lỗi, cung cấp địa chỉ mục tiêu là không. <<\n\n");
	local o_opsc = rwmem(address, 8);
	rwmem(address, "04F01FE5" .. string.format("%08x", reverseAddress(target)));
	return function()
		rwmem(address, o_opsc);
	end;
end
function allocateMem(reqSize, armCompatibility)
	assert((reqSize and not (reqSize >= 4096)) or not (reqSize <= 0), "\n\n>> [allocateMem]: Lỗi, Vui lòng kiểm tra xem reqSize có hợp lệ không. <<\n\n");
	if ((armCompatibility == nil) or (armCompatibility == false)) then
		__allocatedSz = __allocatedSz + reqSize;
		if (__allocatedSz >= 4096) then
			toast("[AlcatelMem]: Bộ nhớ được phân bổ đã cạn kiệt, realloc !");
			__allocated = 0;
			__allocatedSz = reqSize;
		end
		__allocated = ((__allocated == 0) and gg.allocatePage(gg.PROT_READ | gg.PROT_WRITE | gg.PROT_EXEC)) or __allocated;
		return (__allocated + __allocatedSz) - reqSize;
	end
	tempMemory = 0;
	for _, __ in pairs(gg.getRangesList()) do
		if ((__['state'] == "Xa") and (__['type'] == "r-xp")) then
			tempMemory = __['start'];
		end
	end
	assert(isAddrValid(tempMemory), "\n\n>> [deliverMem]: lỗi, không thể chuẩn bị tempMemory.<<\n\n");
	local o_opsc = rwmem(tempMemory, reqSize);
	return tempMemory, function()
		rwmem(tempMemory, o_opsc);
	end;
end
function getRegister(address)
	assert(isAddrValid(address), "\n\n>> [getRegister]: lỗi, vui lòng cung cấp địa chỉ. <<\n\n");
	local scode = "FF5F2DE918009FE500D080E514009FE5010050E3FCFFFF1AFF5FBDE804F01FE5AAAAAAAABBBBBBBB00000000";
	local _regdata = allocateMem(76);
	local _amem, _amemRestore = allocateMem(scode:len() + 8, true);
	gg.processPause();
	rwmem(_amem, rwmem(address, 8) .. scode);
	wpm(_amem + 8 + 32, 4, address + 8);
	wpm(_amem + 8 + 36, 4, _regdata);
	local _jmpRestore = setjmp(address, _amem);
	gg.processResume();
	function RegisterCtl(newReg)
		stack = rpm(_regdata, 4);
		if (stack == 0) then
			return false;
		end
		reg = {};
		for r = 0, 13 do
			regName = ((r == "13") and "LR") or ("R" .. r);
			if ((newReg ~= nil) and (newReg[regName] ~= nil)) then
				wpm(stack + (r * 4), 4, newReg[regName]);
			end
			reg[regName] = rpm(stack + (r * 4), 4);
		end
		return reg;
	end
	return RegisterCtl, function()
		wpm(_amem + 8 + 40, 4, 1);
		_jmpRestore();
		_amemRestore();
	end;
end
function dumpAddress(address, szDump)
	cByte = 0;
	data = rwmem(address, szDump);
	return "Address            Hex                       Data\n" .. data:gsub("........", function(x)
		bByte = "";
		sByte = "";
		for _ = 1, #x, 2 do
			bByte = bByte .. x:sub(_, _ + 1) .. " ";
			sByte = sByte .. string.char(tonumber(x:sub(_, _ + 1), 16)) .. " ";
		end
		dumpHex = string.format("0x%08X", address - cByte) .. " : " .. bByte .. " | " .. sByte .. "\n";
		cByte = cByte + 4;
		return dumpHex;
	end);
end
function insideOfLib(address)
	notify("Tìm kiếm tài liệu tham khảo chéo ");
	_ = rpm(address, gg.TYPE_DWORD);
	if (rpm(_, gg.TYPE_DWORD) ~= 0) then
		__ = insideOfLib(_);
		return sf("(Ptr)0x%08X %s", address, ((__ ~= "") and ("-> " .. __)) or "");
	end
	for _, __ in pairs(gg.getRangesList()) do
		notify("Tìm kiếm tài liệu tham khảo chéo ");
		if ((__['type'] == "r-xp") or (__['type'] == "rwxp")) then
			if ((address >= __['start']) and (address <= __["end"])) then
				return __['name']:match("[^/]+$") .. sf(" + 0x%X", address - __['start']);
			end
		end
	end
	return sf("0x%X", rpm(address, gg.TYPE_DWORD));
end
function getRegisterName(idx)
	return ((idx == 13) and "LR") or ("R" .. idx);
end
function isOpAllowed(opcode)
	for i = 1, #denyOpcode do
		if (reverseAddress(opcode & 4278190080) == denyOpcode[i]) then
			return false;
		end
	end
	return true;
end

function hook_Fields(ww)
gg.setVisible(false)
	a = lib
	local m = {};
	m[1] = {address=(a + ww),flags=gg.TYPE_DWORD};
	gg.addListItems(m);
	gg.clearList();
	gg.loadResults(m);
	t = gg.getResults(1);
	local _inputAddress = t[1].address;
	_strAddress = tohex(_inputAddress);
	_getReg, _getRegRestore = getRegister(_inputAddress);
	gg.setVisible(false);
	while _getReg() == false do
		if (gg.isVisible() and (gg.alert("Hook bị gián đoạn:\n- Hủy hook ?", "Yes", "No") == 1)) then
			gg.clearResults();
			return _getRegRestore();
		end
		gg.setVisible(false);
		notify("Chờ void được gọi ");
		gg.sleep(230);
	end
	savedRegs = _getReg();
	if (_registerOp == 2) then
		local _regOptText, _regOptVal, _regOptType, _newRegs = {}, {}, {}, {};
		for _regIdx = 0, 13 do
			local regName = getRegisterName(_regIdx);
			local regAddr = savedRegs[regName];
			_regOptText[#_regOptText + 1] = ((_regIdx == 0) and "Viết đăng ký mới:\n\nR0:") or regName;
			_regOptVal[#_regOptVal + 1] = tohex(regAddr);
			_regOptType[#_regOptType + 1] = "number";
		end
		_regOpt = gg.prompt(_regOptText, _regOptVal, _regOptType);
		for _regIdx = 0, 13 do
			_newRegs[getRegisterName(_regIdx)] = tonumber(_regOpt[_regIdx + 1]);
		end
		savedRegs = _getReg(_newRegs);
	end
	_getRegRestore();
	local regOptt = {};
	for _optIdx = 0, 0 do
		local _regName = getRegisterName(_optIdx);
		regOptt = _regName .. "    |  " .. sf("0x%08X : %s", savedRegs[_regName], (_showCf and insideOfLib(savedRegs[_regName])) or "?");
		loz = savedRegs[_regName];
	end
	gg.clearResults();
	local t = {};
	t[1] = {address=loz,flags=gg.TYPE_DWORD};
	gg.addListItems(t);
	gg.loadResults(t);
	t = gg.getResults(1)
    update = t[1].address
    gg.clearList()
    gg.clearResults()
end
function Fields(a,b,c)
local fields = {}
	fields[1] = {address=(update +a),flags=c,value = b, freeze = true}
	gg.addListItems(fields)
    end
    
    
    
---------------------------------------------------------------
hook_Fields(0x9D07F0)
Fields(0x34,"15",16)



hook_Fields(0x9D07F0)
Fields(0x1C,"999999",4)
Fields(0x2C,"0",16)
Fields(0x24,"0",16)

--[[ 
32 bit only
Game : zombie cubes 2
// RVA: 0x765F2C Offset: 0x765F2C VA: 0x765F2C
	private void Update() { }
public int points; // 0x40
public float maxSpeed; // 0x58
4 = Dword , int
16 = float
]]















