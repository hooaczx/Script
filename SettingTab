local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
  if tonumber(str) ~= nil or str == 'inf' then
    return true
  end
end
repeat
    wait()
until game:IsLoaded()
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 3
getgenv().TPWalk = false
getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower
local player = game:GetService("Players").LocalPlayer
local controlModule = require(player.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
getgenv().TweenSpeed = 16
getgenv().TweenWalk = false

local function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local currentGameId = game.PlaceId

local Toggle = AddToggle(Main5u6, {
  Name = "Infinite Jump",
  Default = false,
  Callback = function(s)
  getgenv().InfJ = s
    game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
    end)
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

local Toggle = AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})


local originalWalkSpeed, originalJumpPower = 16, 50

AddTextBox(Main5u6, {
  Name = "Number WalkSpeed",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalSpeed = tonumber(value)
    if additionalSpeed then
      getgenv().Walkspeed = additionalSpeed
    end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(state)
    getgenv().loopW = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalWalkSpeed = humanoid.WalkSpeed
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopW then
            pcall(function()
              humanoid.WalkSpeed = originalWalkSpeed + (getgenv().Walkspeed or 0)
            end)
          end
        end)
      else
        humanoid.WalkSpeed = originalWalkSpeed
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number JumpPower",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalJump = tonumber(value)
    if additionalJump then
      getgenv().Jumppower = additionalJump
    end
  end
})

local ToggleJump = AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(state)
    getgenv().loopJ = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalJumpPower = humanoid.JumpPower
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopJ then
            pcall(function()
              humanoid.JumpPower = originalJumpPower + (getgenv().Jumppower or 0)
            end)
          end
        end)
      else
        humanoid.JumpPower = originalJumpPower
      end
    end
  end
})

local function setupTPWalk()
    local runService = game:GetService("RunService")
    local connection
    if connection then
        connection:Disconnect()
    end
    local function onCharacterAdded(character)
        local hum = character:WaitForChild("Humanoid")
        connection = runService.Stepped:Connect(function()
            if getgenv().TPWalk and hum and hum.Parent then
                if hum.Health > 0 then
                    if hum.MoveDirection.Magnitude > 0 then
                        if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
                            character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                        else
                            character:TranslateBy(hum.MoveDirection)
                        end
                    end
                else
                    connection:Disconnect()
                end
            else
                connection:Disconnect()
            end
        end)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if isNumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk() 
        else
            if connection then
                connection:Disconnect()
            end
        end
    end
})

local Player = game.Players.LocalPlayer
local originalUserId = Player.UserId
local idInput

local function setPlayerId(newId)
    if newId then
        Player.UserId = newId
    else
        if game.CreatorType == Enum.CreatorType.User then
            Player.UserId = game.CreatorId
        elseif game.CreatorType == Enum.CreatorType.Group then
            Player.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
        end
    end
end

AddTextBox(Main5u6, {
    Name = "Custom Profile in leaderboard",
    Default = "Enter ID",
    PlaceholderText = "Enter UserID",
    ClearText = true,
    Callback = function(value)
        idInput = tonumber(value)
        if Toggle:GetState() then
            setPlayerId(idInput)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Custom UserID",
    Default = false,
    Callback = function(state)
        if state then
            if idInput then
                setPlayerId(idInput)
            else
                Toggle:SetState(false)
            end
        else
            setPlayerId(originalUserId)
        end
    end
})

getgenv().name = "Protected"
getgenv().ProtectName = false
local originalName = game.Players.LocalPlayer.Name
local heartbeatConnection

local function updateNameInTextLabels(newName)
    local Plr = game.Players.LocalPlayer
    if not game:IsLoaded() then game.Loaded:Wait() end

    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end

            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)
        end
    end

    game.DescendantAdded:Connect(function(value)
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end
        end
    end)

    local leaderboard = game:GetService("CoreGui").PlayerList.PlayerListMaster.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScrollingFrame.OffsetUndoFrame
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        if not getgenv().ProtectName then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
            return
        end
        for _, v in ipairs(leaderboard:GetDescendants()) do
            if v:IsA("TextLabel") and v.Text == originalName then
                v.Text = newName
            end
        end
    end)
end

local function revertNameInTextLabels()
    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            value.Text = value.Text:gsub(getgenv().name, originalName)
        end
    end
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end
end

AddTextBox(Main5u6, {
  Name = "Custom Name",
  Default = "Enter",
  PlaceholderText = "Enter name to replace",
  ClearText = true,
  Callback = function(input)
      getgenv().name = input
      if getgenv().ProtectName then
          revertNameInTextLabels()
          updateNameInTextLabels(getgenv().name)
      end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "Name Protection",
  Default = false,
  Callback = function(state)
      getgenv().ProtectName = state
      if state then
          updateNameInTextLabels(getgenv().name)
      else
          revertNameInTextLabels()
      end
  end
})

local kickReasons = {}
local kickReasonTable = AddTextTable(Main5u6, {Name = "Log of Kick Reasons"})
local kickAttempts = {}

local ToggleKick = AddToggle(Main5u6, {
    Name = "Anti Kick",
    Default = false,
    Callback = function(isEnabled)
        local mt = getrawmetatable(game)
        local oldNameCall = mt.__namecall
        local protect = newcclosure or function(f) return f end

        setreadonly(mt, false)

        if isEnabled then
            mt.__namecall = protect(function(self, ...)
                local method = getnamecallmethod()
                local args = {...}

                if method == "Kick" then
                    local reasonText = tostring(args[1] or "No reason provided")
                    table.insert(kickAttempts, {time = os.time(), reason = reasonText})

                    if not table.find(kickReasons, reasonText) then
                        table.insert(kickReasons, reasonText)
                        pcall(function()
                            kickReasonTable.AddMessage(reasonText)
                        end)
                    end

                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Kick Attempt Blocked",
                        Text = "A kick attempt was intercepted.\nReason: " .. reasonText,
                        Duration = 5
                    })
                    return
                end

                if method == "ClearAllChildren" and self == game.Players then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "ClearAllChildren Attempt Blocked",
                        Text = "An attempt to clear all players was intercepted.",
                        Duration = 5
                    })
                    return
                end

                if method == "Shutdown" then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Shutdown Attempt Blocked",
                        Text = "A shutdown attempt was intercepted.",
                        Duration = 5
                    })
                    return
                end

                if method == "BindToClose" then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Server Close Attempt Blocked",
                        Text = "An attempt to close the server was intercepted.",
                        Duration = 5
                    })
                    return
                end

                return oldNameCall(self, ...)
            end)
        else
            mt.__namecall = oldNameCall
        end

        setreadonly(mt, true)
    end
})

local toggleAntiSit = false
local heartbeatConnectionAntiSit = nil
local firstRun = true

local function preventsitting(enable)
    local seatsLeft = false
    for _, v in pairs(workspace:GetDescendants()) do
        if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
            if v.Disabled ~= enable then
                v.Disabled = enable
            end
            if not v.Disabled then
                seatsLeft = true
            end
        end
    end
    return seatsLeft
end

AddToggle(Main5u6, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(value)
        if firstRun then
            firstRun = false
            return
        end

        toggleAntiSit = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Anti Sit",
            Text = tostring(value),
            Duration = 3
        })
        
        if toggleAntiSit then
            if not heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit = RunService.Heartbeat:Connect(function()
                    local seatsLeft = preventsitting(toggleAntiSit)
                    if not seatsLeft then
                        heartbeatConnectionAntiSit:Disconnect()
                        heartbeatConnectionAntiSit = nil
                    end
                end)
            end
        else
            if heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit:Disconnect()
                heartbeatConnectionAntiSit = nil
            end
        end
    end
})

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
AddWarningMessage(Main5u6, {
WarningMessage = "Anti Fling was removed due to safety concerns due to being banned from the game",
ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
})
else
local player = game:GetService("Players").LocalPlayer
local isEnabled = false
local heartbeatConnection
local previousRotations = {}

local function isPartRotatingTooFast(part)
	if part and part:IsA("BasePart") then
		local lastRotation = previousRotations[part] or part.Rotation
		local currentRotation = part.Rotation
		local rotationChange = (currentRotation - lastRotation).Magnitude
		previousRotations[part] = currentRotation
		return rotationChange > 5
	end
	return false
end

local function isPartInLocalPlayerCharacter(part)
	local localPlayer = game.Players.LocalPlayer
	if localPlayer and localPlayer.Character then
		return part:IsDescendantOf(localPlayer.Character)
	end
	return false
end

AddToggle(Main5u6, {
    Name = "Anti Fling",
    Default = false,
    Callback = function(state)
        isEnabled = state

        if isEnabled then
            heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
                for _, otherPlayer in pairs(game:GetService("Players"):GetPlayers()) do
                    if otherPlayer ~= player and otherPlayer.Character then
                        for _, part in pairs(otherPlayer.Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide and not isPartInLocalPlayerCharacter(part) then
                                if isPartRotatingTooFast(part) then
                                    part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                end
                                part.CanCollide = false
                                part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                part.CustomPhysicalProperties = nil
                            end
                        end
                    end
                end
            end)
        else
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end

            for _, otherPlayer in pairs(game:GetService("Players"):GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character then
                    for _, part in pairs(otherPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") and not part.CanCollide then
                            part.CanCollide = true
                        end
                    end
                end
            end

            previousRotations = {}
        end
    end
})
end

local connection

AddToggle(Main5u6, {
    Name = "Anti-Idle",
    Default = false,
    Callback = function(state)
        if state then
            connection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})

local lastCF, stop, heartbeatConnection
local Enabled = false

local function start()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    heartbeatConnection = game:GetService('RunService').Heartbeat:Connect(function()
        if stop or not Enabled then
            return
        end
        if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
            lastCF = lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame
        end
    end)
    lplr.Character:FindFirstChildOfClass('Humanoid').RootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
        if Enabled then
            stop = true
            if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
                lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame = lastCF
            end
            game:GetService('RunService').Heartbeat:Wait()
            stop = false
        end
    end)
end

local function setupCharacter(character)
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid').RootPart
    if Enabled then
        start()
    end
end

lplr.CharacterAdded:Connect(function(character)
    setupCharacter(character)
end)

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        Enabled = state
        if Enabled then
            if lplr.Character then
                setupCharacter(lplr.Character)
            end
        else
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
            end
        end
    end
})


local function setCameraOcclusion()
    lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
end

setCameraOcclusion()

lp.CharacterAdded:Connect(function()
    setCameraOcclusion()
end)

AddToggle(Main5u6, {
    Name = "Camera no Occlusion",
    Default = false,
    Callback = function(value)
        if value then
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
        else
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
        end
    end
})

local isBotActive = false

local function startBotMovement()
    while isBotActive do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)
        
        character.Humanoid.MoveToFinished:Wait()
        
        wait(1)
    end
end

AddToggle(Main5u6, {
    Name = "Bot Movement",
    Default = false,
    Callback = function(value)
        isBotActive = value
        if isBotActive then
            startBotMovement()
        end
    end
})

local Walkwithoutendtoggle = false

local function Walkwithoutend()
    while Walkwithoutendtoggle do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)

        task.wait(0.1)
    end
end

AddToggle(Main5u6, {
    Name = "Walk without end",
    Default = false,
    Callback = function(value)
        Walkwithoutendtoggle = value
        if Walkwithoutendtoggle then
            Walkwithoutend()
        end
    end
})

local Lighting = game:GetService("Lighting")
local isFogEnabled = false
local isRainbowEnabled = false
local rainbowEffectConnection
local originalColors = {}
local isChanging = false

local function storeOriginalColors()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            originalColors[part] = part.BrickColor
        end
    end
end

local originalLightingSettings = {
    Ambient = Lighting.Ambient,
    Brightness = Lighting.Brightness,
    OutdoorAmbient = Lighting.OutdoorAmbient,
    FogStart = Lighting.FogStart,
    FogEnd = Lighting.FogEnd,
    FogColor = Lighting.FogColor
}

local function createRainbowTween(targetColor)
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local tweenGoal = {Ambient = targetColor}
    local tween = TweenService:Create(Lighting, tweenInfo, tweenGoal)
    tween:Play()
end

local function createRainbowEffect()
    local hue = 0
    return RunService.Heartbeat:Connect(function()
        if isFogEnabled then
            hue = (hue + 1) % 360
            local targetColor = Color3.fromHSV(hue / 360, 1, 1)
            Lighting.FogColor = targetColor
            Lighting.Ambient = targetColor
            Lighting.Brightness = targetColor
        end
    end)
end

local function createMapRainbowEffect()
    local hue = 0
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)

    RunService.Heartbeat:Connect(function()
        if isRainbowEnabled then
            hue = (hue + 1) % 360
            for _, part in ipairs(workspace:GetDescendants()) do
                if part:IsA("BasePart") then
                    local targetColor = Color3.fromHSV(hue / 360, 1, 1)
                    local tweenGoal = {Color = targetColor}
                    local tween = TweenService:Create(part, tweenInfo, tweenGoal)
                    tween:Play()
                end
            end
        else
            for part, originalColor in pairs(originalColors) do
                if part and part:IsA("BasePart") then
                    local tweenGoal = {Color = originalColor.Color}
                    local tween = TweenService:Create(part, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), tweenGoal)
                    tween:Play()
                end
            end
        end
    end)
end

AddToggle(Main5u6, {
    Name = "Fog Rainbow Effect",
    Default = false,
    Callback = function(value)
        if isChanging then return end
        isChanging = true
        isFogEnabled = value

        if isFogEnabled then
            rainbowEffectConnection = createRainbowEffect()
            Lighting.FogStart = 10
            Lighting.FogEnd = 100
        else
            if rainbowEffectConnection then
                rainbowEffectConnection:Disconnect()
                rainbowEffectConnection = nil
            end
            local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            local resetAmbientTween = TweenService:Create(Lighting, tweenInfo, {Ambient = originalLightingSettings.Ambient})
            local resetBrightnessTween = TweenService:Create(Lighting, tweenInfo, {Brightness = originalLightingSettings.Brightness})
            local resetOutdoorAmbientTween = TweenService:Create(Lighting, tweenInfo, {OutdoorAmbient = originalLightingSettings.OutdoorAmbient})

            resetAmbientTween:Play()
            resetBrightnessTween:Play()
            resetOutdoorAmbientTween:Play()

            Lighting.FogStart = originalLightingSettings.FogStart
            Lighting.FogEnd = originalLightingSettings.FogEnd
            Lighting.FogColor = originalLightingSettings.FogColor
        end
        isChanging = false
    end
})

AddToggle(Main5u6, {
    Name = "Map Rainbow Effect\n⚠️Lag",
    Default = false,
    Callback = function(value)
        if isChanging then return end
        isChanging = true
        isRainbowEnabled = value
        if isRainbowEnabled then
            storeOriginalColors()
        else
            for part, originalColor in pairs(originalColors) do
                if part and part:IsA("BasePart") then
                    local tweenGoal = {Color = originalColor.Color}
                    local tween = TweenService:Create(part, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), tweenGoal)
                    tween:Play()
                end
            end
        end
        isChanging = false
    end
})

createMapRainbowEffect()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()

local trail = nil
local a0, a1
local heartbeatConnectionrainbow, rainbowConnection
local isTrailEnabled = false

local function createTrail()
    if not trail and isTrailEnabled then
        trail = Instance.new("Trail")
        trail.Parent = char:WaitForChild("HumanoidRootPart")
        a0 = Instance.new("Attachment", char.HumanoidRootPart)
        a0.Name = "TrailAttachment"
        a1 = Instance.new("Attachment", char.HumanoidRootPart)
        a1.Name = "TrailAttachment1"
        trail.Attachment0 = a0
        trail.Attachment1 = a1
        heartbeatConnectionrainbow = RunService.Heartbeat:Connect(function()
            if char and char:FindFirstChild("HumanoidRootPart") then
                a0.Position = Vector3.new(0, 0, 0)
                a1.Position = Vector3.new(0, -0.2, 0)
            end
        end)
        local hue = 0
        rainbowConnection = RunService.Heartbeat:Connect(function()
            if not isTrailEnabled then return end
            hue = (hue + 1) % 360
            local colors = {}
            for i = 0, 4 do
                local segmentHue = (hue + i * 72) % 360
                local color = Color3.fromHSV(segmentHue / 360, 1, 1)
                table.insert(colors, ColorSequenceKeypoint.new(i / 4, color))
            end
            trail.Color = ColorSequence.new(colors)
        end)
    end
end

local function cleanupTrail()
    if trail then
        trail.Enabled = false
        trail:Destroy()
        trail = nil
    end
    if heartbeatConnectionrainbow then
        heartbeatConnectionrainbow:Disconnect()
        heartbeatConnectionrainbow = nil
    end
    if rainbowConnection then
        rainbowConnection:Disconnect()
        rainbowConnection = nil
    end
end

local function onCharacterAdded(newChar)
    char = newChar
    if isTrailEnabled then
        cleanupTrail()
        createTrail()
    end
end

plr.CharacterAdded:Connect(onCharacterAdded)

AddToggle(Main5u6, {
    Name = "Trail Rainbow",
    Default = false,
    Callback = function(value)
        isTrailEnabled = value
        if value then
            createTrail()
            if trail then
                trail.Enabled = true
            end
        else
            cleanupTrail()
        end
    end
})

local ToggleFakeLag = false

AddToggle(Main5u6, {
    Name = "Fake Lag",
    Default = false,
    Callback = function(ToggleFakeLag)
    if ToggleFakeLag then
            settings():GetService("NetworkSettings").IncomingReplicationLag = 99999999999999
        else
            settings():GetService("NetworkSettings").IncomingReplicationLag = 0
        end
    end
})

local playerGui = game:GetService("CoreGui")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local Settings = {
    ZoomTime = 0.3,
    ZoomedAmount = 10,
    FadeTime = 0.3
}

local oldZoom = game.Workspace.CurrentCamera.FieldOfView
local originalState = {}
local stateSaved = false

local function createTween(object, properties, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    return game:GetService("TweenService"):Create(object, tweenInfo, properties)
end

local function saveState()
    if not stateSaved then
        for _, v in pairs(character:GetDescendants()) do
            if (v:IsA("BasePart") or v:IsA("Decal")) and v:IsDescendantOf(character) then
                originalState[v] = v.LocalTransparencyModifier
            elseif (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(character) then
                originalState[v] = v.Enabled
            end
        end
        
        for _, v in pairs(playerGui:GetDescendants()) do
            if (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(playerGui) then
                if v.Name ~= "ZoomGui" and v.Enabled ~= nil then
                    originalState[v] = v.Enabled
                end
            end
        end
        
        stateSaved = true
    end
end

local function setCharacterTransparency(value, duration)
    for _, v in pairs(character:GetDescendants()) do
        if (v:IsA("BasePart") or v:IsA("Decal")) and v:IsDescendantOf(character) then
            createTween(v, {LocalTransparencyModifier = value}, duration):Play()
        end
    end
end

local function setGuiEnabled(enabled)
    for _, v in pairs(character:GetDescendants()) do
        if (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(character) then
           if v.Name ~= "ZoomGui" then
            v.Enabled = enabled
        end
    end

    for _, v in pairs(playerGui:GetDescendants()) do
        if (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(playerGui) then
            if v.Name ~= "ZoomGui" then
                v.Enabled = enabled
            end
        end
    end
end

local function restoreState(duration)
    for v, state in pairs(originalState) do
        if v:IsDescendantOf(character) then
            if (v:IsA("BasePart") or v:IsA("Decal")) and v:IsDescendantOf(character) then
                createTween(v, {LocalTransparencyModifier = state}, duration):Play()
            elseif (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(playerGui) then
                v.Enabled = state
            end
        elseif v:IsDescendantOf(playerGui) then
            if (v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("ScreenGui")) and v:IsDescendantOf(playerGui) then
                v.Enabled = state
            end
        end
    end
end

local function createZoomGui()
    local ScreenGui = Instance.new("ScreenGui", playerGui)
    ScreenGui.Name = "ZoomGui"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    ScreenGui.IgnoreGuiInset = true

    local zoomButton = Instance.new("ImageButton", ScreenGui)
    zoomButton.Name = "ZoomButton"
    zoomButton.Size = UDim2.new(0.09, 0, 0.16, 0)
    zoomButton.Position = UDim2.new(0.79, 0, 0.55, 0)
    zoomButton.AnchorPoint = Vector2.new(0.74, 0.5)
    zoomButton.BackgroundTransparency = 1
    zoomButton.ImageTransparency = 1
    zoomButton.Image = "rbxthumb://type=Asset&id=92429393851260&w=150&h=150"

    local fadeIn = createTween(zoomButton, {BackgroundTransparency = 1, ImageTransparency = 0}, Settings.FadeTime)
    fadeIn:Play()

    local function createZoom(time, amount)
        local Tween_Info = TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        return game:GetService("TweenService"):Create(game.Workspace.CurrentCamera, Tween_Info, {FieldOfView = amount})
    end

    local zoomInTween = createZoom(Settings.ZoomTime, Settings.ZoomedAmount)
    local zoomOutTween = createZoom(Settings.ZoomTime, oldZoom)

    zoomButton.MouseButton1Down:Connect(function()
        saveState()
        setCharacterTransparency(1, Settings.FadeTime)
        setGuiEnabled(false)
        zoomInTween:Play()
    end)

    zoomButton.MouseButton1Up:Connect(function()
        restoreState(Settings.FadeTime)
        zoomOutTween:Play()
    end)

    zoomButton.MouseLeave:Connect(function()
        restoreState(Settings.FadeTime)
        zoomOutTween:Play()
    end)
end

local function removeZoomGui()
    local zoomGui = playerGui:FindFirstChild("ZoomGui")
    if zoomGui then
        local zoomButton = zoomGui:FindFirstChild("ZoomButton")
        if zoomButton then
            local fadeOut = createTween(zoomButton, {BackgroundTransparency = 1, ImageTransparency = 1}, Settings.FadeTime)
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                zoomGui:Destroy()
            end)
        else
            zoomGui:Destroy()
        end
    end
end

AddToggle(Main5u6, {
    Name = "Zoom gui",
    Default = false,
    Callback = function(state)
        if state then
            createZoomGui()
        else
            removeZoomGui()
        end
    end
})

