local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
  if tonumber(str) ~= nil or str == 'inf' then
    return true
  end
end
repeat
    wait()
until game:IsLoaded()
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 3
getgenv().TPWalk = false
getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower
local player = game:GetService("Players").LocalPlayer
local controlModule = require(player.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
getgenv().TweenSpeed = 16
getgenv().TweenWalk = false

local function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local currentGameId = game.PlaceId

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
AddWarningMessage(Main5u6, {
WarningMessage = "Freecam was removed due to safety concerns due to being banned from the game",
ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
})
else
local speed = 50
local freecamEnabled = false
local part
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local RunService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local isRotating = false
local mouseDelta = Vector2.new()
local cameraAngleX = 0
local cameraAngleY = 0

local function createPart()
    if part then
        part:Destroy()
    end
    
    part = Instance.new("Part", workspace)
    part.Transparency = 1
    part.Anchored = true
    part.CanCollide = false
    camera.CameraSubject = part

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local headPosition = character:WaitForChild("Head").Position
    local behindPosition = headPosition - humanoidRootPart.CFrame.LookVector * 5

    camera.CFrame = CFrame.new(behindPosition, headPosition)
end

local function updateSpeed(newSpeed)
    speed = newSpeed
end

AddTextBox(Main5u6, {
    Name = "Number Speed Freecam",
    Default = "Enter",
    PlaceholderText = "Enter speed",
    ClearText = true,
    Callback = function(value)
        local newSpeed = tonumber(value)
        if newSpeed then
            updateSpeed(newSpeed)
        end
    end
})

local ToggleWalk = AddToggle(Main5u6, {
    Name = "Freecam",
    Default = false,
    Callback = function(enabled)
        freecamEnabled = enabled
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        
        if enabled then
            createPart()

            humanoid:MoveTo(character.PrimaryPart.Position)
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)

            camera.CameraType = Enum.CameraType.Scriptable
            camera.FieldOfView = 70
        else
            if part then
                part:Destroy()
                part = nil
            end

            humanoid:MoveTo(character.PrimaryPart.Position)
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)

            camera.CameraSubject = player.Character:WaitForChild("Humanoid")
            camera.CameraType = Enum.CameraType.Custom
        end
    end
})

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.Touch and not gameProcessed then
        isRotating = true
    end
end)

userInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.Touch then
        isRotating = false
    end
end)

userInputService.InputChanged:Connect(function(input, gameProcessed)
    if freecamEnabled and isRotating then
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            mouseDelta = input.Delta
        elseif input.UserInputType == Enum.UserInputType.Touch then
            mouseDelta = input.Delta
        end
    end
end)

local sensitivity = 6

RunService.RenderStepped:Connect(function()
    if freecamEnabled then
        local moveDirection = controlModule:GetMoveVector()
        local desiredVelocity = Vector3.new()
        
        if moveDirection.X ~= 0 then
            desiredVelocity = desiredVelocity + camera.CFrame.RightVector * (moveDirection.X * speed)
        end
        if moveDirection.Z ~= 0 then
            desiredVelocity = desiredVelocity - camera.CFrame.LookVector * (moveDirection.Z * speed)
        end
        
        part.Position = part.Position + desiredVelocity * RunService.RenderStepped:Wait()

        if isRotating and mouseDelta ~= Vector2.new() then
            cameraAngleY = cameraAngleY - mouseDelta.X * 0.002 * sensitivity
            cameraAngleX = math.clamp(cameraAngleX + mouseDelta.Y * 0.002 * sensitivity, -math.pi/2, math.pi/2)
        end

        local rotation = CFrame.Angles(cameraAngleX, cameraAngleY, 0)
        camera.CFrame = CFrame.new(part.Position) * rotation

        mouseDelta = Vector2.new()
    end
end)

player.CharacterAdded:Connect(function(character)
    createPart()
    if freecamEnabled then
        camera.CameraType = Enum.CameraType.Scriptable
        camera.FieldOfView = 70
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end
end)

player.CharacterRemoving:Connect(function(character)
    if freecamEnabled then
        camera.CameraType = Enum.CameraType.Scriptable
        camera.FieldOfView = 70
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    else
        camera.CameraType = Enum.CameraType.Custom
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end)
end

local Toggle = AddToggle(Main5u6, {
  Name = "Infinite Jump",
  Default = false,
  Callback = function(s)
  getgenv().InfJ = s
    game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
    end)
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

local Toggle = AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})


local originalWalkSpeed, originalJumpPower = 16, 50 -- ค่าเริ่มต้นสำหรับ WalkSpeed และ JumpPower

AddTextBox(Main5u6, {
  Name = "Number WalkSpeed",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalSpeed = tonumber(value)
    if additionalSpeed then
      getgenv().Walkspeed = additionalSpeed
    end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(state)
    getgenv().loopW = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalWalkSpeed = humanoid.WalkSpeed
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopW then
            pcall(function()
              humanoid.WalkSpeed = originalWalkSpeed + (getgenv().Walkspeed or 0)
            end)
          end
        end)
      else
        humanoid.WalkSpeed = originalWalkSpeed
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number JumpPower",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalJump = tonumber(value)
    if additionalJump then
      getgenv().Jumppower = additionalJump
    end
  end
})

local ToggleJump = AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(state)
    getgenv().loopJ = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalJumpPower = humanoid.JumpPower
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopJ then
            pcall(function()
              humanoid.JumpPower = originalJumpPower + (getgenv().Jumppower or 0)
            end)
          end
        end)
      else
        humanoid.JumpPower = originalJumpPower
      end
    end
  end
})

local function setupTPWalk()
    local runService = game:GetService("RunService")
    local connection
    if connection then
        connection:Disconnect()
    end
    local function onCharacterAdded(character)
        local hum = character:WaitForChild("Humanoid")
        connection = runService.Stepped:Connect(function()
            if getgenv().TPWalk and hum and hum.Parent then
                if hum.Health > 0 then
                    if hum.MoveDirection.Magnitude > 0 then
                        if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
                            character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                        else
                            character:TranslateBy(hum.MoveDirection)
                        end
                    end
                else
                    connection:Disconnect()
                end
            else
                connection:Disconnect()
            end
        end)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if isNumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk() 
        else
            if connection then
                connection:Disconnect()
            end
        end
    end
})

local Player = game.Players.LocalPlayer
local originalUserId = Player.UserId
local idInput

local function setPlayerId(newId)
    if newId then
        Player.UserId = newId
    else
        if game.CreatorType == Enum.CreatorType.User then
            Player.UserId = game.CreatorId
        elseif game.CreatorType == Enum.CreatorType.Group then
            Player.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
        end
    end
end

AddTextBox(Main5u6, {
    Name = "Custom Profile in leaderboard",
    Default = "Enter ID",
    PlaceholderText = "Enter UserID",
    ClearText = true,
    Callback = function(value)
        idInput = tonumber(value)
        if Toggle:GetState() then
            setPlayerId(idInput)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Custom UserID",
    Default = false,
    Callback = function(state)
        if state then
            if idInput then
                setPlayerId(idInput)
            else
                Toggle:SetState(false)
            end
        else
            setPlayerId(originalUserId)
        end
    end
})

getgenv().name = "Protected"
getgenv().ProtectName = false
local originalName = game.Players.LocalPlayer.Name
local heartbeatConnection

local function updateNameInTextLabels(newName)
    local Plr = game.Players.LocalPlayer
    if not game:IsLoaded() then game.Loaded:Wait() end

    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end

            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)
        end
    end

    game.DescendantAdded:Connect(function(value)
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end
        end
    end)

    local leaderboard = game:GetService("CoreGui").PlayerList.PlayerListMaster.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScrollingFrame.OffsetUndoFrame
    heartbeatConnection = RunService.Heartbeat:Connect(function()
        if not getgenv().ProtectName then
            heartbeatConnection:Disconnect()
            heartbeatConnection = nil
            return
        end
        for _, v in ipairs(leaderboard:GetDescendants()) do
            if v:IsA("TextLabel") and v.Text == originalName then
                v.Text = newName
            end
        end
    end)
end

local function revertNameInTextLabels()
    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            value.Text = value.Text:gsub(getgenv().name, originalName)
        end
    end
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end
end

AddTextBox(Main5u6, {
  Name = "Custom Name",
  Default = "Enter",
  PlaceholderText = "Enter name to replace",
  ClearText = true,
  Callback = function(input)
      getgenv().name = input
      if getgenv().ProtectName then
          revertNameInTextLabels()
          updateNameInTextLabels(getgenv().name)
      end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "Name Protection",
  Default = false,
  Callback = function(state)
      getgenv().ProtectName = state
      if state then
          updateNameInTextLabels(getgenv().name)
      else
          revertNameInTextLabels()
      end
  end
})

local function safeCall(func)
    return function(...)
        local success, err = pcall(func, ...)
        if not success then
        end
    end
end

local function setupAdonisHooks()
    local getinfo = getinfo or debug.getinfo
    local DEBUG = false
    local Hooked = {}

    local Detected, Kill

    setthreadidentity(2)

    for i, v in getgc(true) do
        if typeof(v) == "table" then
            local DetectFunc = rawget(v, "Detected")
            local KillFunc = rawget(v, "Kill")
        
            if typeof(DetectFunc) == "function" and not Detected then
                Detected = DetectFunc
                table.insert(Hooked, Detected)
            end

            if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
                Kill = KillFunc
                table.insert(Hooked, Kill)
            end
        end
    end

    local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
        local LevelOrFunc, Info = ...
        if Detected and LevelOrFunc == Detected then
            if DEBUG then
                SendDetailedNotification("Adonis Bypass", "Adonis has been bypassed\nDetected at: " .. os.date("%Y-%m-%d %H:%M:%S"))
            end
            return coroutine.yield(coroutine.running())
        end
        return Old(...)
    end))

    setthreadidentity(7)
end

local function setupKickBypass()
    local Players = game:GetService("Players")
    local kickAttempts = {}
    local kickReasons = {}

    local kickReasonTable = AddTextTable(Main5u6, {Name = "log a Kick Reasons"})

    local ToggleKick = AddToggle(Main5u6, {
        Name = "Anti Kick",
        Default = false,
        Callback = function(isEnabled)
            local mt = getrawmetatable(game)
            local oldNameCall = mt.__namecall
            local protect = newcclosure or protect_function

            if not protect then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Incompatible Exploit Warning",
                    Text = "Your exploit does not support protection against stack trace errors, using fallback function.",
                    Duration = 5
                })
                protect = function(f) return f end
            end

            setreadonly(mt, false)

            if isEnabled then
                mt.__namecall = protect(function(self, ...)
                    local method = getnamecallmethod()
                    local reason = {...}

                    if method == "Kick" then
                        local reasonText = tostring(reason[1])
                        table.insert(kickAttempts, {time = os.time(), reason = reasonText})

                        if not table.find(kickReasons, reasonText) then
                            table.insert(kickReasons, reasonText)
                            kickReasonTable.AddMessage(reasonText)
                        end

                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Kick Attempt Blocked",
                            Text = "A kick attempt was intercepted and saved.\nReason: " .. reasonText,
                            Duration = 5
                        })

                        self.Kick = nil
                        return
                    end
                    return oldNameCall(self, ...)
                end)
            else
                mt.__namecall = oldNameCall
            end

            setreadonly(mt, true)
        end
    })
end

local function runScript()
    safeCall(setupAdonisHooks)()
    safeCall(setupKickBypass)()
end

runScript()

local toggleAntiSit = false
local heartbeatConnectionAntiSit = nil
local firstRun = true

local function preventsitting(enable)
    local seatsLeft = false
    for _, v in pairs(workspace:GetDescendants()) do
        if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
            if v.Disabled ~= enable then
                v.Disabled = enable
            end
            if not v.Disabled then
                seatsLeft = true
            end
        end
    end
    return seatsLeft
end

AddToggle(Main5u6, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(value)
        if firstRun then
            firstRun = false
            return
        end

        toggleAntiSit = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Anti Sit",
            Text = tostring(value),
            Duration = 3
        })
        
        if toggleAntiSit then
            if not heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit = RunService.Heartbeat:Connect(function()
                    local seatsLeft = preventsitting(toggleAntiSit)
                    if not seatsLeft then
                        heartbeatConnectionAntiSit:Disconnect()
                        heartbeatConnectionAntiSit = nil
                    end
                end)
            end
        else
            if heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit:Disconnect()
                heartbeatConnectionAntiSit = nil
            end
        end
    end
})

local isRun = false
local connectionantifling

AddToggle(Main5u6, {
    Name = "Anti Fling",
    Default = false,
    Callback = function(state)
        if state then
            if not isRun then
                isRun = true
                connectionantifling = RunService.Stepped:Connect(function()
                        for _, CoPlayer in pairs(Players:GetPlayers()) do
                           if CoPlayer ~= Player and CoPlayer.Character then
                        for _, Part in pairs(CoPlayer.Character:GetDescendants()) do
                          if Part:IsA("BasePart") and Part.CanCollide then
                              Part.CanCollide = false
                           end
                        end
                      for _, Accessory in pairs(CoPlayer.Character:GetChildren()) do
                            if Accessory:IsA("Accessory") then
                          for _, AccPart in pairs(Accessory:GetDescendants()) do
                             if AccPart:IsA("BasePart") and AccPart.CanCollide then
                                 AccPart.CanCollide = false
                               end
                           end
                       end
                   end
              end
          end
          for _, WorkspaceAccessory in pairs(workspace:GetChildren()) do
             if WorkspaceAccessory:IsA("Accessory") then
                  for _, Part in pairs(WorkspaceAccessory:GetDescendants()) do
                      if Part:IsA("BasePart") and Part.CanCollide then
                            Part:Destroy()
                              end
                           end
                       end
                   end
                end)
            end
        else
            if isRun then
                isRun = false
                if connectionantifling then
                    connectionantifling:Disconnect()
                    connectionantifling = nil
                end
            end
        end
    end
})

local connection

AddToggle(Main5u6, {
    Name = "Anti-Idle",
    Default = false,
    Callback = function(state)
        if state then
            connection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})

local lastCF, stop, heartbeatConnection
local Enabled = false

local function start()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    heartbeatConnection = game:GetService('RunService').Heartbeat:Connect(function()
        if stop or not Enabled then
            return
        end
        if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
            lastCF = lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame
        end
    end)
    lplr.Character:FindFirstChildOfClass('Humanoid').RootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
        if Enabled then
            stop = true
            if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
                lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame = lastCF
            end
            game:GetService('RunService').Heartbeat:Wait()
            stop = false
        end
    end)
end

local function setupCharacter(character)
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid').RootPart
    if Enabled then
        start()
    end
end

lplr.CharacterAdded:Connect(function(character)
    setupCharacter(character)
end)

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        Enabled = state
        if Enabled then
            if lplr.Character then
                setupCharacter(lplr.Character)
            end
        else
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
            end
        end
    end
})


local function setCameraOcclusion()
    lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
end

setCameraOcclusion()

lp.CharacterAdded:Connect(function()
    setCameraOcclusion()
end)

AddToggle(Main5u6, {
    Name = "Camera no Occlusion",
    Default = false,
    Callback = function(value)
        if value then
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
        else
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
        end
    end
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local tweenService = game:GetService("TweenService")
local soundId = 1445412859
local sound2 = 18424802758
local effectEnabled = false
local losthealth = Instance.new("Sound", player:WaitForChild("PlayerScripts"))
losthealth.SoundId = "rbxassetid://" .. soundId
losthealth.Volume = 1
local healthincreased = Instance.new("Sound", player:WaitForChild("PlayerScripts"))
healthincreased.SoundId = "rbxassetid://" .. sound2
healthincreased.Volume = 1

local blurEffect = Instance.new("BlurEffect", camera)
blurEffect.Size = 0

local colorCorrectionEffect = Instance.new("ColorCorrectionEffect", camera)
colorCorrectionEffect.TintColor = Color3.new(1, 1, 1)
colorCorrectionEffect.Saturation = 0

local overlayFrame = Instance.new("Frame")
overlayFrame.Size = UDim2.new(1, 0, 1, 0)
overlayFrame.Position = UDim2.new(0, 0, 0, 0)
overlayFrame.BackgroundColor3 = Color3.new(0, 0, 0)
overlayFrame.BackgroundTransparency = 1
overlayFrame.Visible = true
overlayFrame.Parent = player:WaitForChild("PlayerGui")

local function triggerHitEffect()
    if not effectEnabled then return end

    wait(0.1)

    tweenService:Create(blurEffect, TweenInfo.new(0.5), {Size = 24}):Play()
    wait(0.5)

    tweenService:Create(blurEffect, TweenInfo.new(0.5), {Size = 0}):Play()
    wait(0.5)

    local function changeColor(isHealthIncreasing)
        if isHealthIncreasing then
            healthincreased:Play()
            tweenService:Create(colorCorrectionEffect, TweenInfo.new(0.5), {TintColor = Color3.new(0, 1, 0), Saturation = 0}):Play()
            game.StarterGui:SetCore("SendNotification", {
                Title = "Health Increased!",
                Text = "Your health has increased.",
                icon = "rbxassetid://78608769732362",
                Duration = 2,
            })
        else
            losthealth:Play()
            tweenService:Create(colorCorrectionEffect, TweenInfo.new(0.5), {TintColor = Color3.new(1, 0, 0), Saturation = -1}):Play()
            wait(0.5)
            tweenService:Create(colorCorrectionEffect, TweenInfo.new(0.5), {TintColor = Color3.new(1, 1, 1), Saturation = 0}):Play()
            game.StarterGui:SetCore("SendNotification", {
                Title = "Injury Alert!",
                Text = "You have lost health.",
                icon = "rbxassetid://78608769732362",
                Duration = 2,
            })
        end
    end

    local elapsedTime = 0
    while elapsedTime < 1.5 do
        changeColor(false)
        elapsedTime = elapsedTime + 1
    end
end

local function onHealthChanged(humanoid)
    humanoid.HealthChanged:Connect(function(newHealth)
        if effectEnabled then
            if newHealth < humanoid.MaxHealth then
                triggerHitEffect()
            elseif newHealth > humanoid.MaxHealth then
                changeColor(true)
            end
        end
    end)
end

local function onCharacterAdded(newCharacter)
    character = newCharacter
    local humanoid = character:WaitForChild("Humanoid")
    onHealthChanged(humanoid)
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

local isBotActive = false

local function startBotMovement()
    while isBotActive do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)
        
        character.Humanoid.MoveToFinished:Wait()
        
        wait(1)
    end
end

AddToggle(Main5u6, {
    Name = "Bot Movement",
    Default = false,
    Callback = function(value)
        isBotActive = value
        if isBotActive then
            startBotMovement()
        end
    end
})

local Walkwithoutendtoggle = false

local function Walkwithoutend()
    while Walkwithoutendtoggle do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)

        task.wait(0.1)
    end
end

AddToggle(Main5u6, {
    Name = "Walk without end",
    Default = false,
    Callback = function(value)
        Walkwithoutendtoggle = value
        if Walkwithoutendtoggle then
            Walkwithoutend()
        end
    end
})

AddToggle(Main5u6, {
    Name = "effect: Increase health And decrease health",
    Default = false,
    Callback = function(value) 
        effectEnabled = value
    end
})

local Lighting = game:GetService("Lighting")
local isFogEnabled = false
local isRainbowEnabled = false
local rainbowEffectConnection
local originalColors = {}
local isChanging = false

local function storeOriginalColors()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            originalColors[part] = part.BrickColor
        end
    end
end

local originalLightingSettings = {
    Ambient = Lighting.Ambient,
    Brightness = Lighting.Brightness,
    OutdoorAmbient = Lighting.OutdoorAmbient,
    FogStart = Lighting.FogStart,
    FogEnd = Lighting.FogEnd,
    FogColor = Lighting.FogColor
}

local function createRainbowTween(targetColor)
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local tweenGoal = {Ambient = targetColor}
    local tween = TweenService:Create(Lighting, tweenInfo, tweenGoal)
    tween:Play()
end

local function createRainbowEffect()
    local hue = 0
    return RunService.Heartbeat:Connect(function()
        if isFogEnabled then
            hue = (hue + 1) % 360
            local targetColor = Color3.fromHSV(hue / 360, 1, 1)
            Lighting.FogColor = targetColor
            Lighting.Ambient = targetColor
            Lighting.Brightness = targetColor
        end
    end)
end

local function createMapRainbowEffect()
    local hue = 0
    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)

    RunService.Heartbeat:Connect(function()
        if isRainbowEnabled then
            hue = (hue + 1) % 360
            for _, part in ipairs(workspace:GetDescendants()) do
                if part:IsA("BasePart") then
                    local targetColor = Color3.fromHSV(hue / 360, 1, 1)
                    local tweenGoal = {Color = targetColor}
                    local tween = TweenService:Create(part, tweenInfo, tweenGoal)
                    tween:Play()
                end
            end
        else
            for part, originalColor in pairs(originalColors) do
                if part and part:IsA("BasePart") then
                    local tweenGoal = {Color = originalColor.Color}
                    local tween = TweenService:Create(part, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), tweenGoal)
                    tween:Play()
                end
            end
        end
    end)
end

AddToggle(Main5u6, {
    Name = "Fog Rainbow Effect",
    Default = false,
    Callback = function(value)
        if isChanging then return end
        isChanging = true
        isFogEnabled = value

        if isFogEnabled then
            rainbowEffectConnection = createRainbowEffect()
            Lighting.FogStart = 10
            Lighting.FogEnd = 100
        else
            if rainbowEffectConnection then
                rainbowEffectConnection:Disconnect()
                rainbowEffectConnection = nil
            end
            local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
            local resetAmbientTween = TweenService:Create(Lighting, tweenInfo, {Ambient = originalLightingSettings.Ambient})
            local resetBrightnessTween = TweenService:Create(Lighting, tweenInfo, {Brightness = originalLightingSettings.Brightness})
            local resetOutdoorAmbientTween = TweenService:Create(Lighting, tweenInfo, {OutdoorAmbient = originalLightingSettings.OutdoorAmbient})

            resetAmbientTween:Play()
            resetBrightnessTween:Play()
            resetOutdoorAmbientTween:Play()

            Lighting.FogStart = originalLightingSettings.FogStart
            Lighting.FogEnd = originalLightingSettings.FogEnd
            Lighting.FogColor = originalLightingSettings.FogColor
        end
        isChanging = false
    end
})

AddToggle(Main5u6, {
    Name = "Map Rainbow Effect\n⚠️Lag",
    Default = false,
    Callback = function(value)
        if isChanging then return end
        isChanging = true
        isRainbowEnabled = value
        if isRainbowEnabled then
            storeOriginalColors()
        else
            for part, originalColor in pairs(originalColors) do
                if part and part:IsA("BasePart") then
                    local tweenGoal = {Color = originalColor.Color}
                    local tween = TweenService:Create(part, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), tweenGoal)
                    tween:Play()
                end
            end
        end
        isChanging = false
    end
})

createMapRainbowEffect()
