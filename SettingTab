local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
  if tonumber(str) ~= nil or str == 'inf' then
    return true
  end
end
repeat
    wait()
until game:IsLoaded()
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 3
getgenv().TPWalk = false
local detectionRadius = 50
local lookAtconnection
getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower
local player = game:GetService("Players").LocalPlayer
local controlModule = require(player.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
local mouse = game.Players.LocalPlayer:GetMouse()
getgenv().TweenSpeed = 0.21
getgenv().TweenWalk = false
Service = setmetatable({}, {
    __index = function(Self, Index)
        local NewService = game:GetService(Index)
        if NewService then
            Self[Index] = NewService
        end
        return NewService
    end
})
localPuppet = Service.Players.LocalPlayer

function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local currentGameId = game.PlaceId

AddToggle(Main5u6, {
  Name = "Infinite Jump",
  Default = false,
  Callback = function(s)
  getgenv().InfJ = s
    game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
    end)
  end
})

Storage = Instance.new("Folder", game:FindService("CoreGui"))
Storage.Name = "Highlight_Storage_Player"
local connections = {}
local espLoop

function toggleESP(enable, color)
    if enable then
        if espLoop then return end
        espLoop = RunService.Heartbeat:Connect(function()
         for _, plr in ipairs(game:FindService("Players"):GetPlayers()) do
            if plr ~= game:FindService("Players").LocalPlayer then
              highlight = Storage:FindFirstChild(plr.Name)
               if not highlight then
                  highlight = Instance.new("Highlight")
                  highlight.Name = plr.Name
                  highlight.Parent = Storage
              end
              highlight.FillColor = _G.ESPColor or Color3.fromRGB(0, 0, 255)
              highlight.FillTransparency = 1
              highlight.OutlineColor = _G.ESPColor or Color3.fromRGB(0, 0, 255)
              highlight.OutlineTransparency = 0
              highlight.DepthMode = "AlwaysOnTop"
              if plr.Character then
                  highlight.Adornee = plr.Character
              end
              if not connections[plr] then
                connections[plr] = plr.CharacterAdded:Connect(function(newChar)
                    highlight.Adornee = newChar
                    end)
                 end
              end
           end
        end)
        connections["PlayerRemoving"] = game:FindService("Players").PlayerRemoving:Connect(function(plr)
            if Storage:FindFirstChild(plr.Name) then
                Storage[plr.Name]:Destroy()
            end
            if connections[plr] then
                connections[plr]:Disconnect()
                connections[plr] = nil
            end
        end)
    else
        if espLoop then
            espLoop:Disconnect()
            espLoop = nil
        end
        for _, highlight in ipairs(Storage:GetChildren()) do
            highlight:Destroy()
        end
        for _, conn in pairs(connections) do
            conn:Disconnect()
        end
        connections = {}
    end
end

AddToggle(Main5u6, {
    Name = "Esp Player",
    Default = false,
    Callback = function(bool)
        _G.ESP = bool
        toggleESP(bool, _G.ESPColor or Color3.fromRGB(0, 0, 255))
    end
})

AddColorPicker(Main5u6, {
    Name = "Esp Player Color",
    Default = Color3.fromRGB(0, 0, 255),
    Callback = function(color)
        _G.ESPColor = color
        if _G.ESP then
            for _, highlight in ipairs(Storage:GetChildren()) do
                highlight.FillColor = color
                highlight.OutlineColor = color
            end
        end
    end
})

close = {}

function resetHighlight()
    if close.highlightObject then
        close.highlightObject:Destroy()
        close.highlightObject = nil
    end
    if close.characterAddedConnection then
        close.characterAddedConnection:Disconnect()
        close.characterAddedConnection = nil
    end
    close.highlightedPlayer = nil
end

function lookAtClosestPlayer()
    character = localPuppet.Character or localPuppet.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
    closestPlayer = nil
    closestDistance = detectionRadius
    closestVerticalDifference = math.huge
    for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
        if otherPlayer ~= localPuppet and otherPlayer.Character then
            local otherHumanoidRootPart = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHumanoidRootPart then
                local otherHumanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
                if otherHumanoid and otherHumanoid.Health > 0 then
                    local horizontalDistance = (Vector3.new(humanoidRootPart.Position.X, 0, humanoidRootPart.Position.Z) -
                        Vector3.new(otherHumanoidRootPart.Position.X, 0, otherHumanoidRootPart.Position.Z)).Magnitude
                    local verticalDifference = math.abs(humanoidRootPart.Position.Y - otherHumanoidRootPart.Position.Y)
                    if horizontalDistance < closestDistance or
                       (horizontalDistance == closestDistance and verticalDifference < closestVerticalDifference) then
                        closestPlayer = otherPlayer
                        closestDistance = horizontalDistance
                        closestVerticalDifference = verticalDifference
                    end
                end
            end
        end
    end
    if closestPlayer then
        if close.highlightedPlayer ~= closestPlayer then
            resetHighlight()
            close.highlightedPlayer = closestPlayer
            close.highlightObject = Instance.new("Highlight")
            close.highlightObject.Adornee = closestPlayer.Character
            close.highlightObject.FillColor = Color3.fromRGB(255, 255, 0)
            close.highlightObject.OutlineColor = Color3.fromRGB(255, 255, 0)
            close.highlightObject.FillTransparency = 1
            close.highlightObject.OutlineTransparency = 0
            close.highlightObject.Parent = closestPlayer.Character
            close.characterAddedConnection = closestPlayer.CharacterAdded:Connect(function()
                resetHighlight()
                close.highlightObject = Instance.new("Highlight")
                close.highlightObject.Adornee = closestPlayer.Character
                close.highlightObject.FillColor = Color3.fromRGB(255, 255, 0)
                close.highlightObject.OutlineColor = Color3.fromRGB(255, 255, 0)
                close.highlightObject.FillTransparency = 1
                close.highlightObject.OutlineTransparency = 0
                close.highlightObject.Parent = closestPlayer.Character
            end)
        end
        targetPosition = closestPlayer.Character.HumanoidRootPart.Position
        horizontalTargetPosition = Vector3.new(targetPosition.X, humanoidRootPart.Position.Y, targetPosition.Z)
        isWalking = humanoid.MoveDirection.Magnitude > 0
        if isWalking then
            humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, horizontalTargetPosition)
        else
            humanoidRootPart.CFrame = humanoidRootPart.CFrame:Lerp(
                CFrame.lookAt(humanoidRootPart.Position, horizontalTargetPosition), 0.3
            )
        end
    else
        resetHighlight()
    end
end

AddTextBox(Main5u6, {
    Name = "Detection Radius",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        local newValue = tonumber(value)
        if newValue and newValue > 0 then
            detectionRadius = newValue
        end
    end
})

AddToggle(Main5u6, {
    Name = "LookAt Player",
    Default = false,
    Callback = function(state)
        if state then
            close.lookAtconnection = RunService.Heartbeat:Connect(lookAtClosestPlayer)
            close.characterAddedConnection = localPuppet.CharacterAdded:Connect(function()
                if close.lookAtconnection then
                    close.lookAtconnection:Disconnect()
                end
                close.lookAtconnection = RunService.Heartbeat:Connect(lookAtClosestPlayer)
            end)
        else
            if close.lookAtconnection then
                close.lookAtconnection:Disconnect()
                close.lookAtconnection = nil
            end
            if close.characterAddedConnection then
                close.characterAddedConnection:Disconnect()
                close.characterAddedConnection = nil
            end
            if close.highlightObject then
                close.highlightObject:Destroy()
                close.highlightObject = nil
            end
            close.highlightedPlayer = nil
            local character = localPuppet.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position)
                end
            end
        end
    end
})

AddTextBox(Main5u6, {
  Name = "Number CameraFieldOfView",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

AddToggle(Main5u6, {
  Name = "Camera FieldOfView",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter zoom distance",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value)
    if getgenv().isZoomActive then
      game.Players.LocalPlayer.CameraMaxZoomDistance = getgenv().CameraZoom
    end
  end
})

AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().isZoomActive = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().initialMaxZoom then
          getgenv().initialMaxZoom = player.CameraMaxZoomDistance
        end
        getgenv().zoomUpdateConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().isZoomActive then
            pcall(function()
              local zoomValue = getgenv().CameraZoom
              player.CameraMaxZoomDistance = zoomValue
            end)
          end
        end)
      else
        if getgenv().zoomUpdateConnection then
          getgenv().zoomUpdateConnection:Disconnect()
          getgenv().zoomUpdateConnection = nil
        end
        if getgenv().initialMaxZoom then
          player.CameraMaxZoomDistance = getgenv().initialMaxZoom
        end
      end
    end
  end
})

local originalWalkSpeed, originalJumpPower = 16, 50

AddTextBox(Main5u6, {
  Name = "Number WalkSpeed",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalSpeed = tonumber(value)
    if additionalSpeed then
      getgenv().Walkspeed = additionalSpeed
    end
  end
})

AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(state)
    getgenv().loopW = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalWalkSpeed = humanoid.WalkSpeed
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopW then
            pcall(function()
              humanoid.WalkSpeed = originalWalkSpeed + (getgenv().Walkspeed or 0)
            end)
          end
        end)
      else
        humanoid.WalkSpeed = originalWalkSpeed
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number JumpPower",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalJump = tonumber(value)
    if additionalJump then
      getgenv().Jumppower = additionalJump
    end
  end
})

AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(state)
    getgenv().loopJ = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalJumpPower = humanoid.JumpPower
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopJ then
            pcall(function()
              humanoid.JumpPower = originalJumpPower + (getgenv().Jumppower or 0)
            end)
          end
        end)
      else
        humanoid.JumpPower = originalJumpPower
      end
    end
  end
})

local Tpwk
local Tpwkchrtr
local Tpwkdied

function setupTPWalk()
    if Tpwk then
        Tpwk:Disconnect()
        Tpwk = nil
    end
    if Tpwkchrtr then
        Tpwkchrtr:Disconnect()
        Tpwkchrtrn = nil
    end
    if Tpwkdied then
        Tpwkdied:Disconnect()
        Tpwkdied = nil
    end
    
    function onCharacterAdded(character)
        local hum = character:WaitForChild("Humanoid")
        Tpwk = game:GetService("RunService").Stepped:Connect(function()
            if getgenv().TPWalk and hum and hum.Parent then
                if hum.MoveDirection.Magnitude > 0 then
                    if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
                        character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                    else
                        character:TranslateBy(hum.MoveDirection)
                    end
                end
            else
               if Tpwk then
                Tpwk:Disconnect()
                end
            end
        end)
        Tpwkdied = hum.Died:Connect(function()
            if Tpwk then
                Tpwk:Disconnect()
                Tpwk = nil
            end
        end)
    end
    Tpwkchrtr = player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if isNumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk()
        else
            if Tpwk then
                Tpwk:Disconnect()
                Tpwk = nil
           end
            if Tpwkchrtr then
                Tpwkchrtr:Disconnect()
                Tpwkchrtrn = nil
           end
           if Tpwkdied then
                Tpwkdied:Disconnect()
                Tpwkdied = nil
            end
        end
    end
})

local Player = game.Players.LocalPlayer
local originalUserId = Player.UserId
local idInput

function setPlayerId(newId)
    if newId then
        Player.UserId = newId
    else
        if game.CreatorType == Enum.CreatorType.User then
            Player.UserId = game.CreatorId
        elseif game.CreatorType == Enum.CreatorType.Group then
            Player.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
        end
    end
end

AddTextBox(Main5u6, {
    Name = "Custom Profile in leaderboard",
    Default = "Enter ID",
    PlaceholderText = "Enter UserID",
    ClearText = true,
    Callback = function(value)
        idInput = tonumber(value)
        if Toggle:GetState() then
            setPlayerId(idInput)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Custom UserID",
    Default = false,
    Callback = function(state)
        if state then
            if idInput then
                setPlayerId(idInput)
            else
                Toggle:SetState(false)
            end
        else
            setPlayerId(originalUserId)
        end
    end
})

getgenv().name = "Protected"
getgenv().ProtectName = false
originalName = game.Players.LocalPlayer.Name
spaghettiWires = {}

function updateNameInTextLabels(newName)
    local Plr = game.Players.LocalPlayer
    if not game:IsLoaded() then game.Loaded:Wait() end

    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end

            local pasta = value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)

            table.insert(spaghettiWires, pasta) -- เก็บการเชื่อมต่อ
        end
    end

    local noodle = game.DescendantAdded:Connect(function(value)
        if value:IsA("TextLabel") then
            local has = string.find(value.Text, Plr.Name)
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, newName)
                end
            end)
            if has then
                value.Text = value.Text:gsub(Plr.Name, newName)
            end
        end
    end)
    table.insert(spaghettiWires, noodle)
end

function revertNameInTextLabels()
    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") then
            value.Text = value.Text:gsub(getgenv().name, originalName)
        end
    end
    for _, pasta in ipairs(spaghettiWires) do
        pasta:Disconnect()
    end
    spaghettiWires = {}
end

AddTextBox(Main5u6, {
  Name = "Custom Name",
  Default = "Enter",
  PlaceholderText = "Enter name to replace",
  ClearText = true,
  Callback = function(input)
      getgenv().name = input
      if getgenv().ProtectName then
          revertNameInTextLabels()
          updateNameInTextLabels(getgenv().name)
      end
  end
})

AddToggle(Main5u6, {
  Name = "Name Protection",
  Default = false,
  Callback = function(state)
      getgenv().ProtectName = state
      if state then
          updateNameInTextLabels(getgenv().name)
      else
          revertNameInTextLabels()
      end
  end
})

isAntiKickEnabled = false
kickReasons = {}
kickReasonTable = AddTextTable(Main5u6, {Name = "Log of Kick Reasons"})
kickAttempts = {}

AddToggle(Main5u6, {
    Name = "Anti Kick",
    Default = false,
    Callback = function(isEnabled)
        local mt = getrawmetatable(game)
        local oldNameCall = mt.__namecall
        local protect = newcclosure or function(f) return f end

        setreadonly(mt, false)

        isAntiKickEnabled = isEnabled

        if isEnabled then
            mt.__namecall = protect(function(self, ...)
                if not isAntiKickEnabled then
                    return oldNameCall(self, ...)
                end

                local method = getnamecallmethod()
                local args = {...}

                if method == "Kick" then
                    local reasonText = tostring(args[1] or "No reason provided")
                    table.insert(kickAttempts, {time = os.time(), reason = reasonText})

                    if not table.find(kickReasons, reasonText) then
                        table.insert(kickReasons, reasonText)
                        pcall(function()
                            kickReasonTable.AddMessage(reasonText)
                        end)
                    end

                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Kick Attempt Blocked",
                        Text = "A kick attempt was intercepted.\nReason: " .. reasonText,
                        Duration = 5
                    })
                    return
                end

                if method == "ClearAllChildren" and self == game.Players then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "ClearAllChildren Attempt Blocked",
                        Text = "An attempt to clear all players was intercepted.",
                        Duration = 5
                    })
                    return
                end

                if method == "Shutdown" then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Shutdown Attempt Blocked",
                        Text = "A shutdown attempt was intercepted.",
                        Duration = 5
                    })
                    return
                end

                if method == "BindToClose" then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Server Close Attempt Blocked",
                        Text = "An attempt to close the server was intercepted.",
                        Duration = 5
                    })
                    return
                end

                if method == "remove" and self == game.Players.LocalPlayer then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Remove Attempt Blocked",
                        Text = "An attempt to remove the LocalPlayer was intercepted.",
                        Duration = 5
                    })
                    return
                end

                return oldNameCall(self, ...)
            end)
        else
            mt.__namecall = oldNameCall
        end

        setreadonly(mt, true)
    end
})

toggleAntiSit = false
heartbeatConnectionAntiSit = nil
firstRun = true

function preventsitting(enable)
    local seatsLeft = false
    for _, v in pairs(workspace:GetDescendants()) do
        if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
            if v.Disabled ~= enable then
                v.Disabled = enable
            end
            if not v.Disabled then
                seatsLeft = true
            end
        end
    end
    return seatsLeft
end

AddToggle(Main5u6, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(value)
        if firstRun then
            firstRun = false
            return
        end

        toggleAntiSit = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Anti Sit",
            Text = tostring(value),
            Duration = 3
        })
        
        if toggleAntiSit then
            if not heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit = RunService.Heartbeat:Connect(function()
                    local seatsLeft = preventsitting(toggleAntiSit)
                    if not seatsLeft then
                        heartbeatConnectionAntiSit:Disconnect()
                        heartbeatConnectionAntiSit = nil
                    end
                end)
            end
        else
            if heartbeatConnectionAntiSit then
                heartbeatConnectionAntiSit:Disconnect()
                heartbeatConnectionAntiSit = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do
                if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
                    if v.Disabled then
                        v.Disabled = false
                    end
                end
            end
        end
    end
})

local teleportConnection

AddToggle(Main5u6, {
    Name = "ClickTp",
    Default = false,
    Callback = function(state)
        if state then
            teleportConnection = mouse.Button1Down:Connect(function()
                if mouse.Target ~= nil then
                    local targetPosition = game.Players.LocalPlayer:GetMouse().Hit.p
                    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    humanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end)
        else
            if teleportConnection then
                teleportConnection:Disconnect()
                teleportConnection = nil
            end
        end
    end
})

local x1 = false
local x2
local x3

AddToggle(Main5u6, {
    Name = "Touch Fling",
    Default = false,
    Callback = function(x4)
        x1 = x4
        if x1 then
            x2 = RunService.Heartbeat:Connect(function()
                local x5 = game:GetService("Players").LocalPlayer
                local x6, x7, x8, x9 = nil, nil, nil, 0.1
                x6 = x5.Character
                x7 = x6 and x6:FindFirstChild("HumanoidRootPart")

                if x7 then
                    x8 = x7.Velocity
                    x7.Velocity = x8 * 10000 + Vector3.new(0, 10000, 0)
                    RunService.RenderStepped:Wait()
                    x7.Velocity = x8
                    RunService.Stepped:Wait()
                    x7.Velocity = x8 + Vector3.new(0, x9, 0)
                    x9 = -x9
                end
            end)
        else
            if x2 then
                x2:Disconnect()
                x2 = nil
            end
        end
    end
})

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
AddWarningMessage(Main5u6, {
  WarningMessage = "Anti Fling was removed due to safety concerns due to being banned from the game",
  ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
})
else
AddToggle(Main5u6, {
    Name = "Anti Fling",
    Default = false,
    Callback = function(state)
    if state then
        local abcServices = setmetatable({}, {__index = function(Self, Index)
            local NewService = game.GetService(game, Index)
            if NewService then
                Self[Index] = NewService
            end
            return NewService
        end})

        local localPuppet = abcServices.Players.LocalPlayer

        local function megaPlayerAdded(Player)
            local detectedFlag = false
            local characterEntity
            local primaryPartEntity

            local function megaCharacterAdded(newCharacter)
                characterEntity = newCharacter
                repeat
                    wait()
                    primaryPartEntity = newCharacter:FindFirstChild("HumanoidRootPart")
                until primaryPartEntity
                detectedFlag = false
            end

            megaCharacterAdded(Player.Character or Player.CharacterAdded:Wait())
            Player.CharacterAdded:Connect(megaCharacterAdded)

            zzzConnection = abcServices.RunService.Heartbeat:Connect(function()
                if (characterEntity and characterEntity:IsDescendantOf(workspace)) and (primaryPartEntity and primaryPartEntity:IsDescendantOf(characterEntity)) then
                    if primaryPartEntity.AssemblyAngularVelocity.Magnitude > 50 or primaryPartEntity.AssemblyLinearVelocity.Magnitude > 100 then
                        detectedFlag = true
                        for i,v in ipairs(characterEntity:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v.CanCollide = false
                                v.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                v.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                v.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                            end
                        end
                        primaryPartEntity.CanCollide = false
                        primaryPartEntity.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                        primaryPartEntity.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        primaryPartEntity.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                    end
                end
            end)
        end
        for i,v in ipairs(abcServices.Players:GetPlayers()) do
            if v ~= localPuppet then
                megaPlayerAdded(v)
            end
        end
        abcServices.Players.PlayerAdded:Connect(megaPlayerAdded)
        local lastSpot = nil
        abcMetaTableConnection = abcServices.RunService.Heartbeat:Connect(function()
            pcall(function()
                local primaryPartEntity = localPuppet.Character.PrimaryPart
                if primaryPartEntity.AssemblyLinearVelocity.Magnitude > 250 or primaryPartEntity.AssemblyAngularVelocity.Magnitude > 250 then
                    primaryPartEntity.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                    primaryPartEntity.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                    primaryPartEntity.CFrame = lastSpot
                elseif primaryPartEntity.AssemblyLinearVelocity.Magnitude < 50 or primaryPartEntity.AssemblyAngularVelocity.Magnitude > 50 then
                    lastSpot = primaryPartEntity.CFrame
                end
            end)
        end)
    else
        if zzzConnection then
            zzzConnection:Disconnect()
        end

        if abcMetaTableConnection then
            abcMetaTableConnection:Disconnect()
        end
    end
  end
})
end

local antiIdle

AddToggle(Main5u6, {
    Name = "Anti-Idle",
    Default = false,
    Callback = function(state)
        if state then
            if antiIdle then
                antiIdle:Disconnect()
                antiIdle = nil
            end
            antiIdle = game:GetService("Players").LocalPlayer.Idled:Connect(function()
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
        else
            if antiIdle then
                antiIdle:Disconnect()
                antiIdle = nil
            end
        end
    end
})

functionlocktp = {
    heartbeatConnection = nil,
    propertyChangedConnection = nil,
    lastCF = nil,
    stop = false,
    Enabled = false,
    characterAddedConnection = nil
}
function start()
    if functionlocktp.heartbeatConnection then
        functionlocktp.heartbeatConnection:Disconnect()
        functionlocktp.heartbeatConnection = nil
    end
    functionlocktp.heartbeatConnection = Service.RunService.Heartbeat:Connect(function()
        if functionlocktp.stop or not functionlocktp.Enabled then
            return
        end
        local character = localPuppet.Character
        if character and character:FindFirstChildOfClass('Humanoid') and character:FindFirstChild('HumanoidRootPart') then
            functionlocktp.lastCF = character:FindFirstChild('HumanoidRootPart').CFrame
        end
    end)
    character = localPuppet.Character
    if character then
        local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
        if humanoidRootPart then
            if functionlocktp.propertyChangedConnection then
                functionlocktp.propertyChangedConnection:Disconnect()
                functionlocktp.propertyChangedConnection = nil
            end
            functionlocktp.propertyChangedConnection = humanoidRootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
                if functionlocktp.Enabled then
                    functionlocktp.stop = true
                    humanoidRootPart.CFrame = functionlocktp.lastCF
                    Service.RunService.Heartbeat:Wait()
                    functionlocktp.stop = false
                end
            end)
        end
    end
end
function setupCharacter(character)
    if not character then return end
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChild('HumanoidRootPart')
    if functionlocktp.Enabled then
        start()
    end
end
functionlocktp.characterAddedConnection = localPuppet.CharacterAdded:Connect(setupCharacter)

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        functionlocktp.Enabled = state
        if functionlocktp.Enabled then
            if localPuppet.Character then
                setupCharacter(localPuppet.Character)
            end
        else
            if functionlocktp.heartbeatConnection then
                functionlocktp.heartbeatConnection:Disconnect()
                functionlocktp.heartbeatConnection = nil
            end
            if functionlocktp.propertyChangedConnection then
                functionlocktp.propertyChangedConnection:Disconnect()
                functionlocktp.propertyChangedConnection = nil
            end
            if functionlocktp.characterAddedConnection then
                functionlocktp.characterAddedConnection:Disconnect()
                functionlocktp.characterAddedConnection = nil
            end
        end
    end
})

local chtrcmr

AddToggle(Main5u6, {
    Name = "Camera no Occlusion",
    Default = false,
    Callback = function(value)
        if value then
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
            if not chtrcmr then
                chtrcmr = lp.CharacterAdded:Connect(function()
                    lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
                end)
            end
        else
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
            if chtrcmr then
                chtrcmr:Disconnect()
                chtrcmr = nil
            end
        end
    end
})

trailData = {}

AddToggle(Main5u6, {
    Name = "Trail Rainbow",
    Default = false,
    Callback = function(value)
        if not value then
        if trailData[1] then
            trailData[1].Enabled = false
            trailData[1]:Destroy()
            trailData[1] = nil
        end
        if trailData[2] then
            trailData[2]:Disconnect()
            trailData[2] = nil
        end
        if trailData[3] then
            trailData[3]:Disconnect()
            trailData[3] = nil
        end
        if trailData[4] then
            trailData[4]:Disconnect()
            trailData[4] = nil
        end
    else
        char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        trailData[1] = Instance.new("Trail")
        trailData[1].Parent = char:WaitForChild("HumanoidRootPart")
        local a0 = Instance.new("Attachment", char.HumanoidRootPart)
        a0.Name = "TrailAttachment"
        local a1 = Instance.new("Attachment", char.HumanoidRootPart)
        a1.Name = "TrailAttachment1"
        trailData[1].Attachment0 = a0
        trailData[1].Attachment1 = a1
        trailData[2] = RunService.Heartbeat:Connect(function()
            if char and char:FindFirstChild("HumanoidRootPart") then
                a0.Position = Vector3.new(0, 0, 0)
                a1.Position = Vector3.new(0, -0.2, 0)
                local hue = (tick() * 30) % 360
                local colors = {}
                for i = 0, 4 do
                    local segmentHue = (hue + i * 72) % 360
                    local color = Color3.fromHSV(segmentHue / 360, 1, 1)
                    table.insert(colors, ColorSequenceKeypoint.new(i / 4, color))
                end
                trailData[1].Color = ColorSequence.new(colors)
            end
        end)
        trailData[1].Enabled = true
        trailData[3] = char:WaitForChild("Humanoid").Died:Connect(function()
            if trailData[1] then
                trailData[1].Enabled = false
                trailData[1]:Destroy()
                trailData[1] = nil
            end
            if trailData[2] then
                trailData[2]:Disconnect()
                trailData[2] = nil
            end
        end)
        trailData[4] = game.Players.LocalPlayer.CharacterAdded:Connect(function(newCharacter)
            char = newCharacter
            if trailData[1] then
                trailData[1].Parent = char:WaitForChild("HumanoidRootPart")
                end
            end)
        end
    end
})

local playerGui = game:GetService("CoreGui")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local Settings = {
    ZoomTime = 0.4,
    ZoomedAmount = 14,
    FadeTime = 0.4
}

local oldZoom = game.Workspace.CurrentCamera.FieldOfView
local originalState = {}
local stateSaved = false

local function createTween(object, properties, duration)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    return game:GetService("TweenService"):Create(object, tweenInfo, properties)
end

local function checkGuiContent(gui)
    local hasText = false
    local hasImage = false

    for _, child in pairs(gui:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            hasText = true
        elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
            hasImage = true
        end
    end

    return hasText, hasImage
end

local function saveState()
    if not stateSaved then
        for _, v in pairs(character:GetDescendants()) do
            if v:IsA("BasePart") or v:IsA("Decal") then
                originalState[v] = v.LocalTransparencyModifier
            elseif v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("Frame") then
                originalState[v] = {}
                for _, child in pairs(v:GetDescendants()) do
                    if child:IsA("TextLabel") or child:IsA("TextButton") then
                        originalState[v][child] = {TextTransparency = child.TextTransparency}
                    elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
                        originalState[v][child] = {ImageTransparency = child.ImageTransparency}
                    elseif child:IsA("Frame") then
                        originalState[v][child] = {BackgroundTransparency = child.BackgroundTransparency}
                    end
                end
            end
        end
        stateSaved = true
    end
end

local function restoreState(duration)
    for v, state in pairs(originalState) do
        if v.Parent then
            if v:IsA("BasePart") or v:IsA("Decal") then
                createTween(v, {LocalTransparencyModifier = state}, duration):Play()
            elseif v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("Frame") then
                for child, childState in pairs(state) do
                    if child:IsA("TextLabel") or child:IsA("TextButton") then
                        createTween(child, {TextTransparency = childState.TextTransparency}, duration):Play()
                    elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
                        createTween(child, {ImageTransparency = childState.ImageTransparency}, duration):Play()
                    elseif child:IsA("Frame") then
                        createTween(child, {BackgroundTransparency = childState.BackgroundTransparency}, duration):Play()
                    end
                end
            end
        end
    end
end

local function setCharacterTransparency(value, duration)
    for _, v in pairs(character:GetDescendants()) do
        if v:IsA("BasePart") or v:IsA("Decal") then
            createTween(v, {LocalTransparencyModifier = value}, duration):Play()
        elseif v:IsA("SurfaceGui") or v:IsA("BillboardGui") or v:IsA("Frame") then
            local hasText, hasImage = checkGuiContent(v)

            for _, child in pairs(v:GetDescendants()) do
                if hasText and (child:IsA("TextLabel") or child:IsA("TextButton")) and child.TextTransparency ~= nil then
                    createTween(child, {TextTransparency = value}, duration):Play()
                end
                if hasImage and (child:IsA("ImageLabel") or child:IsA("ImageButton")) and child.ImageTransparency ~= nil then
                    createTween(child, {ImageTransparency = value}, duration):Play()
                end
                if child:IsA("Frame") and child.BackgroundTransparency ~= nil then
                    createTween(child, {BackgroundTransparency = value}, duration):Play()
                end
            end
        end
    end
end

local function createZoomGui()
    local ScreenGui = Instance.new("ScreenGui", playerGui)
    ScreenGui.Name = "ZoomGui"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    ScreenGui.IgnoreGuiInset = true

    local zoomButton = Instance.new("ImageButton", ScreenGui)
    zoomButton.Name = "ZoomButton"
    zoomButton.Size = UDim2.new(0.09, 0, 0.16, 0)
    zoomButton.Position = UDim2.new(0.79, 0, 0.55, 0)
    zoomButton.AnchorPoint = Vector2.new(0.74, 0.5)
    zoomButton.BackgroundTransparency = 1
    zoomButton.ImageTransparency = 1
    zoomButton.Image = "rbxthumb://type=Asset&id=92429393851260&w=150&h=150"

    local fadeIn = createTween(zoomButton, {BackgroundTransparency = 1, ImageTransparency = 0}, Settings.FadeTime)
    fadeIn:Play()

    local function createZoom(time, amount)
        local Tween_Info = TweenInfo.new(time, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        return game:GetService("TweenService"):Create(game.Workspace.CurrentCamera, Tween_Info, {FieldOfView = amount})
    end

    local zoomInTween = createZoom(Settings.ZoomTime, Settings.ZoomedAmount)
    local zoomOutTween = createZoom(Settings.ZoomTime, oldZoom)

    zoomButton.MouseButton1Down:Connect(function()
        saveState()
        setCharacterTransparency(1, Settings.FadeTime)
        zoomInTween:Play()
    end)

    zoomButton.MouseButton1Up:Connect(function()
        restoreState(Settings.FadeTime)
        zoomOutTween:Play()
    end)

    zoomButton.MouseLeave:Connect(function()
        restoreState(Settings.FadeTime)
        zoomOutTween:Play()
    end)
end

local function removeZoomGui()
    local zoomGui = playerGui:FindFirstChild("ZoomGui")
    if zoomGui then
        local zoomButton = zoomGui:FindFirstChild("ZoomButton")
        if zoomButton then
            local fadeOut = createTween(zoomButton, {BackgroundTransparency = 1, ImageTransparency = 1}, Settings.FadeTime)
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                zoomGui:Destroy()
            end)
        else
            zoomGui:Destroy()
        end
    end
end

AddToggle(Main5u6, {
    Name = "Zoom gui",
    Default = false,
    Callback = function(state)
        if state then
            createZoomGui()
        else
            removeZoomGui()
        end
    end
})

local player = game.Players.LocalPlayer
local lightEnabled = false

local function addLightToCharacter(character)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if rootPart then
        local playerLight = rootPart:FindFirstChild("Light")
        if not playerLight then
            local light = Instance.new("PointLight")
            light.Name = "Light"
            light.Parent = rootPart
            light.Range = 30
            light.Brightness = 2.3
        end

        local highlightGui = rootPart:FindFirstChild("HighlightGui")
        if not highlightGui then
            local billboardGui = Instance.new("BillboardGui")
            billboardGui.Name = "HighlightGui"
            billboardGui.Parent = rootPart
            billboardGui.Size = UDim2.new(0, 2 * playerLight.Range, 0, 2 * playerLight.Range)
            billboardGui.Adornee = rootPart
            billboardGui.StudsOffset = Vector3.new(0, playerLight.Range / 2, 0)

            local frame = Instance.new("Frame")
            frame.Parent = billboardGui
            frame.Size = UDim2.new(1, 0, 1, 0)
            frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            frame.BackgroundTransparency = 0.6
            frame.BorderSizePixel = 0
            frame.Shape = Enum.FrameShape.Circle
        end
    end
end

local function removeLightFromCharacter(character)
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        local playerLight = rootPart:FindFirstChild("Light")
        if playerLight then
            playerLight:Destroy()
        end

        local highlightGui = rootPart:FindFirstChild("HighlightGui")
        if highlightGui then
            highlightGui:Destroy()
        end
    end
end

local function onCharacterAdded(character)
    if lightEnabled then
        addLightToCharacter(character)
    else
        removeLightFromCharacter(character)
    end
end

player.CharacterAdded:Connect(onCharacterAdded)

local function toggleLight(state)
    lightEnabled = state
    local character = player.Character
    if character then
        if state then
            addLightToCharacter(character)
        else
            removeLightFromCharacter(character)
        end
    end
end

AddToggle(Main5u6, {
    Name = "Light Around Character",
    Default = false,
    Callback = toggleLight
})

local function Create(instance, parent, props)
    local new = Instance.new(instance, parent)
    if props then
        for prop, value in pairs(props) do
            new[prop] = value
        end
    end
    return new
end

function CreateTween(instance, prop, value, time, tweenWait)
    local tween = TweenService:Create(instance, TweenInfo.new(time, Enum.EasingStyle.Linear), {[prop] = value})
    tween:Play()
    if tweenWait then
        tween.Completed:Wait()
    end
end

function createTextStrokeRainbow(textLabel)
    return RunService.Heartbeat:Connect(function()
        local hue = tick() % 360
        local rainbowColor = Color3.fromHSV(hue / 360, 1, 1)
        textLabel.TextStrokeColor3 = rainbowColor
    end)
end

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local previousCFrame = humanoidRootPart.CFrame
local humanoid = character:WaitForChild("Humanoid")

local screenGui, toggle, speedLabel, togglemodLabelButton, modLabel
local currentSpeed, targetSpeed = 0, 0
local isSpeedLabelVisible, useWalkSpeed, isButtonActive = false, false, true
local stopupdatespeed

function CreateButton(parent, size, position, image, transparency, zIndex, visible)
    return Create("ImageButton", parent, {
        Size = size,
        Position = position,
        Image = image,
        BackgroundTransparency = transparency,
        ZIndex = zIndex,
        Visible = visible
    })
end

function ToggleSpeedGui(create)
    if create then
        screenGui = Create("ScreenGui", game:GetService("CoreGui"))

        toggle = CreateButton(screenGui, UDim2.new(0.06, 0, 0.124, 0), UDim2.new(0.39, 0, 0.004, 0), "rbxassetid://116250785038242", 1, 2, true)

        speedLabel = Create("TextLabel", toggle, {
            Size = UDim2.new(1.9, 0, 0.45, 0),
            Position = UDim2.new(-0.04, 0, 0.5, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Color3.fromRGB(0, 0, 0),
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextScaled = true,
            Text = "Speed: 0",
            BackgroundTransparency = 1,
            ZIndex = 1,
            Visible = false
        })

        togglemodLabelButton = CreateButton(toggle, UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), "rbxassetid://93917932838439", 1, 1, false)

        modLabel = Create("TextLabel", toggle, {
            Size = UDim2.new(1.9, 0, 0.45, 0),
            Position = UDim2.new(0, 0, 0, 0),
            AnchorPoint = Vector2.new(0.5, 0.5),
            BackgroundColor3 = Color3.fromRGB(0, 0, 0),
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextScaled = true,
            Text = "CFrame Mode",
            ZIndex = 1,
            BackgroundTransparency = 1,
            Visible = false
        })
        
        toggle.MouseButton1Click:Connect(function()
            if not isButtonActive then return end
            isButtonActive = false

            if isSpeedLabelVisible then
                speedLabel.Visible = true
                modLabel.Visible = true
                togglemodLabelButton.Visible = true
                CreateTween(speedLabel, "Position", UDim2.new(2, 0, 0.75, 0), 1, false)
                CreateTween(modLabel, "Position", UDim2.new(2, 0, 0.25, 0), 1, false)
                CreateTween(togglemodLabelButton, "Position", UDim2.new(1 + 2.4, 0, 0, 0), 1, false)
             else
                CreateTween(speedLabel, "Position", UDim2.new(0, 0, 0.75, 0), 1, false)
                CreateTween(modLabel, "Position", UDim2.new(0, 0, 0.25, 0), 1, false)
                CreateTween(togglemodLabelButton, "Position", UDim2.new(0, 0, 0, 0), 1, true)
                speedLabel.Visible = false
                modLabel.Visible = false
                togglemodLabelButton.Visible = false
            end
            isSpeedLabelVisible = not isSpeedLabelVisible
            isButtonActive = true
        end)

        togglemodLabelButton.MouseButton1Click:Connect(function()
            useWalkSpeed = not useWalkSpeed
            modLabel.Text = useWalkSpeed and "WalkSpeed Mode" or "CFrame Mode"
        end)

        stopupdatespeed = game:GetService("RunService").RenderStepped:Connect(function()
            if humanoidRootPart then
                if useWalkSpeed then
                    local walkSpeed = humanoid.WalkSpeed
                    if humanoid.MoveDirection.Magnitude > 0 then
                        currentSpeed = math.min(currentSpeed + 1, walkSpeed)
                    else
                        currentSpeed = math.max(currentSpeed - 1, 0)
                    end
                    speedLabel.Text = string.format("Speed: %.0f", currentSpeed)
                else
                    local currentCFrame = humanoidRootPart.CFrame
                    local horizontalMovement = (currentCFrame.Position - previousCFrame.Position)
                    local movementXZ = Vector3.new(horizontalMovement.X, 0, horizontalMovement.Z)
                    local distance = movementXZ.Magnitude
                    targetSpeed = distance / (1 / 60)
                    currentSpeed = currentSpeed + (targetSpeed - currentSpeed) * 0.1
                    speedLabel.Text = string.format("Speed: %.0f", currentSpeed)
                    previousCFrame = currentCFrame
                end
            end
        end)
    else
        if screenGui then
            screenGui:Destroy()
            screenGui = nil
        end
        if stopupdatespeed then
            stopupdatespeed:Disconnect()
            stopupdatespeed = nil
        end
    end
end

AddToggle(Main5u6, {
    Name = "Checker Speed GUI",
    Default = false,
    Callback = function(state)
        ToggleSpeedGui(state)
    end
})

local StatusUi = true
local heartbeatConnection = nil

function AddUi(parent, labelText, labelColor)
    if not StatusUi then
        return nil
    end

    local frame = Create("Frame", parent, {
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.5,
        BorderSizePixel = 0,
        Size = UDim2.new(0.14, 0, 0.07, 0),
        Draggable = true,
        Active = true
    })

    local textLabel = Create("TextLabel", frame, {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = labelText,
        TextColor3 = labelColor,
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    Create("UIPadding", textLabel, {PaddingLeft = UDim.new(0, 5)})
    Create("UICorner", frame, {CornerRadius = UDim.new(0, 3)})

    return textLabel
end

function createFpsAndpinggui()
    if not StatusUi then
        return
    end

    local player = game.Players.LocalPlayer
    local existingUI = player.PlayerGui:FindFirstChild("FpsAndping")
    if existingUI then
        return
    end

    local screenGui = Create("ScreenGui", game:GetService("CoreGui"), {Name = "FpsAndping"})

    Create("UIListLayout", screenGui, {
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0, 10)
    })

    local fpsLabel = AddUi(screenGui, "FPS: Calculating...", Color3.fromRGB(255, 255, 0))
    local pingLabel = AddUi(screenGui, "Ping: Calculating...", Color3.fromRGB(0, 255, 255))

    local displayedFPS = 0
    local displayedPing = 0

    local targetFPS = 0
    local targetPing = 0

    local function updateFPS()
        targetFPS = math.floor(1 / game:GetService("RunService").RenderStepped:Wait())
    end

    local function updatePing()
        local ping = game:GetService("Stats").PerformanceStats.Ping:GetValue()
        targetPing = math.floor(ping)
    end

    local function smoothUpdate()
        if displayedFPS < targetFPS then
            displayedFPS = displayedFPS + 1
        elseif displayedFPS > targetFPS then
            displayedFPS = displayedFPS - 1
        end

        if displayedPing < targetPing then
            displayedPing = displayedPing + 1
        elseif displayedPing > targetPing then
            displayedPing = displayedPing - 1
        end

        fpsLabel.Text = "FPS: " .. displayedFPS
        pingLabel.Text = "Ping: " .. displayedPing .. " ms"
    end

    heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
        updateFPS()
        updatePing()
        smoothUpdate()
    end)

    screenGui.AncestryChanged:Connect(function()
        if not screenGui:IsDescendantOf(game) then
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end)
end

AddToggle(Main5u6, {
    Name = "FpsAndPing",
    Default = false,
    Callback = function()
        StatusUi = not StatusUi
        local player = game.Players.LocalPlayer
        local existingUI = game:GetService("CoreGui"):FindFirstChild("FpsAndping")
        
        if StatusUi then
            if not existingUI then
                createFpsAndpinggui()
            end
        else
            if existingUI then
                existingUI:Destroy()
            end
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end
})

local m3x2q7 = nil
local t1w8y6 = 2
local z9o4p3 = false
local r5j7b1v = nil

function g2y5x8v9(b8p3y6)
    local s4l2h9 = Instance.new("Model")
    s4l2h9.Name = "X3z5Q"

    local d2s9k1 = b8p3y6:FindFirstChild("HumanoidRootPart")
    if not d2s9k1 then return end

    local j7g2k4 = d2s9k1.CFrame

    for _, p5s2v3 in pairs(b8p3y6:GetDescendants()) do
        if p5s2v3:IsA("BasePart") and p5s2v3.Transparency < 1 then
            local j8u1t7 = p5s2v3:Clone()

            for _, w9o5r3 in pairs(j8u1t7:GetChildren()) do
                if not w9o5r3:IsA("SpecialMesh") and 
                   not w9o5r3:IsA("Texture") and 
                   not w9o5r3:IsA("Decal") then
                    w9o5r3:Destroy()
                end
            end

            j8u1t7.CanCollide = false
            j8u1t7.CanQuery = false
            j8u1t7.CanTouch = false
            j8u1t7.Anchored = true

            j8u1t7.Transparency = 0.7
            j8u1t7.Material = Enum.Material.Neon

            j8u1t7.CFrame = j7g2k4:ToWorldSpace(d2s9k1.CFrame:ToObjectSpace(p5s2v3.CFrame))
            j8u1t7.Parent = s4l2h9

            t5w3s2 = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            n4p3l1 = {Transparency = 1}
            p7o8l2 = TweenService:Create(j8u1t7, t5w3s2, n4p3l1)
            p7o8l2:Play()

            p7o8l2.Completed:Connect(function()
                j8u1t7:Destroy()
            end)
        end
    end
    s4l2h9.Parent = workspace
    game:GetService("Debris"):AddItem(s4l2h9, 1)
end

local function v2o8f9d3(b8k1v4)
    local z7y5x9 = b8k1v4:WaitForChild("Humanoid")
    m3x2q7 = b8k1v4:WaitForChild("HumanoidRootPart").Position

    r5j7b1v = RunService.Heartbeat:Connect(function()
        if not z9o4p3 then
            if r5j7b1v then
                r5j7b1v:Disconnect()
                r5j7b1v = nil
            end
            return
        end

        local j4d2n3 = b8k1v4:FindFirstChild("HumanoidRootPart")
        if not j4d2n3 then return end

        local p3f2y4 = j4d2n3.Position
        local t6v3z9 = (m3x2q7 - p3f2y4).Magnitude

        if z7y5x9.MoveDirection.Magnitude > 0 and t6v3z9 >= t1w8y6 then
            g2y5x8v9(b8k1v4)
            m3x2q7 = p3f2y4
        end
    end)
end

AddToggle(Main5u6, {
    Name = "Walk Character Afterimage Effect",
    Default = false,
    Callback = function(state)
        z9o4p3 = state

        if z9o4p3 then
            if player.Character then
                v2o8f9d3(player.Character)
            end
            player.CharacterAdded:Connect(function(character)
                if z9o4p3 then
                    v2o8f9d3(character)
                end
            end)
        else
            if r5j7b1v then
                r5j7b1v:Disconnect()
                r5j7b1v = nil
            end
        end
    end
})

local DayLength = 14.40
local InitialTime = 8
local IsDayCycle = false
local dayCycle
local days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
local CurrentDay = 1
local start = tick() - (InitialTime / 24 * DayLength)
local AM = true

AddTextBox(Main5u6, {
    Name = "Day Cycle Speed",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        local number = tonumber(value)
        if number and number > 0 then
            DayLength = 14.40 / number
            start = tick() - (game.Lighting.ClockTime / 24 * DayLength)
        else
            warn("Invalid number entered for speed adjustment in Day Cycle")
        end
    end
})

AddToggle(Main5u6, {
    Name = "Day Cycle",
    Default = false,
    Callback = function(state)
        IsDayCycle = state
        if state then
            dayCycle = game:GetService("RunService").Stepped:Connect(function()
                local t = (tick() - start) / DayLength * 24
                if t >= 12 then AM = false end
                if t >= 24 then
                    start = tick()
                    CurrentDay = math.fmod(CurrentDay, 7) + 1
                    AM = true
                end
                game.Lighting.ClockTime = math.fmod(t, 24)
            end)
        else
            if dayCycle then
                dayCycle:Disconnect()
                dayCycle = nil
            end
        end
    end
})

loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/refs/heads/main/feedback"))()

local MusicPlayerTab = MakeTab({
   Name = "Music Player",
   image = "rbxthumb://type=Asset&id=107723524907022&w=420&h=420"
})
  
AddMusicPlayer(MusicPlayerTab, {
    Default = "Enter Id Music", 
    PlaceholderText = "Enter Id Music", 
    ClearText = true
})
