local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
  if tonumber(str) ~= nil or str == 'inf' then
    return true
  end
end
repeat
    wait()
until game:IsLoaded()
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 3
getgenv().TPWalk = false
getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower
local player = game:GetService("Players").LocalPlayer
local controlModule = require(player.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
getgenv().TweenSpeed = 16
getgenv().TweenWalk = false

local function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

local currentGameId = game.PlaceId

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
AddWarningMessage(Main5u6, {
WarningMessage = "Freecam was removed due to safety concerns due to being banned from the game",
ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
})
else
local speed = 50
local freecamEnabled = false
local part
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local RunService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local isRotating = false
local mouseDelta = Vector2.new()
local cameraAngleX = 0
local cameraAngleY = 0

local function createPart()
    if part then
        part:Destroy()
    end
    
    part = Instance.new("Part", workspace)
    part.Transparency = 1
    part.Anchored = true
    part.CanCollide = false
    camera.CameraSubject = part

    local character = player.Character or player.CharacterAdded:Wait()
    local headPosition = character:WaitForChild("Head").Position
    local behindPosition = headPosition - character.HumanoidRootPart.CFrame.LookVector * 5  -- 5 studs จากด้านหลังของผู้เล่น
    camera.CFrame = CFrame.new(behindPosition, headPosition)
end

local function updateSpeed(newSpeed)
    speed = newSpeed
end

AddTextBox(Main5u6, {
    Name = "Number Speed Freecam",
    Default = "Enter",
    PlaceholderText = "Enter speed",
    ClearText = true,
    Callback = function(value)
        local newSpeed = tonumber(value)
        if newSpeed then
            updateSpeed(newSpeed)
        end
    end
})

local ToggleWalk = AddToggle(Main5u6, {
    Name = "Freecam",
    Default = false,
    Callback = function(enabled)
        freecamEnabled = enabled
        if enabled then
            createPart()
            player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            camera.CameraType = Enum.CameraType.Scriptable
            camera.FieldOfView = 70
        else
            if part then
                part:Destroy()
                part = nil
            end
            camera.CameraSubject = player.Character:WaitForChild("Humanoid")
            player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
            camera.CameraType = Enum.CameraType.Custom
        end
    end
})

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.Touch and not gameProcessed then
        isRotating = true
    end
end)

userInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.Touch then
        isRotating = false
    end
end)

userInputService.InputChanged:Connect(function(input, gameProcessed)
    if freecamEnabled and isRotating then
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            mouseDelta = input.Delta
        elseif input.UserInputType == Enum.UserInputType.Touch then
            mouseDelta = input.Delta
        end
    end
end)

local sensitivity = 6
local cameraAngleX = 0
local cameraAngleY = 0

RunService.RenderStepped:Connect(function()
    if freecamEnabled then
        local moveDirection = controlModule:GetMoveVector()
        local desiredVelocity = Vector3.new()
        
        if moveDirection.X ~= 0 then
            desiredVelocity = desiredVelocity + camera.CFrame.RightVector * (moveDirection.X * speed)
        end
        if moveDirection.Z ~= 0 then
            desiredVelocity = desiredVelocity - camera.CFrame.LookVector * (moveDirection.Z * speed)
        end
        
        part.Position = part.Position + desiredVelocity * RunService.RenderStepped:Wait()

        if isRotating and mouseDelta ~= Vector2.new() then
            cameraAngleY = cameraAngleY - mouseDelta.X * 0.002 * sensitivity
            cameraAngleX = math.clamp(cameraAngleX + mouseDelta.Y * 0.002 * sensitivity, -math.pi/2, math.pi/2)
        end
        
        local rotation = CFrame.Angles(cameraAngleX, cameraAngleY, 0)
        camera.CFrame = CFrame.new(part.Position) * rotation

        mouseDelta = Vector2.new()
    end
end)

player.CharacterAdded:Connect(function(character)
    createPart()
    if freecamEnabled then
        camera.CameraType = Enum.CameraType.Scriptable
        camera.FieldOfView = 70
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end
end)

player.CharacterRemoving:Connect(function(character)
    if freecamEnabled then
        camera.CameraType = Enum.CameraType.Scriptable
        camera.FieldOfView = 70
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    else
        camera.CameraType = Enum.CameraType.Custom
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end)

end

local Toggle = AddToggle(Main5u6, {
  Name = "Infinite Jump",
  Default = false,
  Callback = function(s)
  getgenv().InfJ = s
    game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
    end)
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

local Toggle = AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})


local originalWalkSpeed, originalJumpPower = 16, 50 -- ค่าเริ่มต้นสำหรับ WalkSpeed และ JumpPower

AddTextBox(Main5u6, {
  Name = "Number WalkSpeed",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalSpeed = tonumber(value)
    if additionalSpeed then
      getgenv().Walkspeed = additionalSpeed
    end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(state)
    getgenv().loopW = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalWalkSpeed = humanoid.WalkSpeed
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopW then
            pcall(function()
              humanoid.WalkSpeed = originalWalkSpeed + (getgenv().Walkspeed or 0)
            end)
          end
        end)
      else
        humanoid.WalkSpeed = originalWalkSpeed
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number JumpPower",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    local additionalJump = tonumber(value)
    if additionalJump then
      getgenv().Jumppower = additionalJump
    end
  end
})

local ToggleJump = AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(state)
    getgenv().loopJ = state
    local player = game:GetService("Players").LocalPlayer
    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
      if state then
        originalJumpPower = humanoid.JumpPower
        game:GetService("RunService").Heartbeat:Connect(function()
          if loopJ then
            pcall(function()
              humanoid.JumpPower = originalJumpPower + (getgenv().Jumppower or 0)
            end)
          end
        end)
      else
        humanoid.JumpPower = originalJumpPower
      end
    end
  end
})

local function setupTPWalk()
    local runService = game:GetService("RunService")
    local connection
    if connection then
        connection:Disconnect()
    end
    local function onCharacterAdded(character)
        local hum = character:WaitForChild("Humanoid")
        connection = runService.Stepped:Connect(function()
            if getgenv().TPWalk and hum and hum.Parent then
                if hum.Health > 0 then
                    if hum.MoveDirection.Magnitude > 0 then
                        if getgenv().TPSpeed and isNumber(getgenv().TPSpeed) then
                            character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                        else
                            character:TranslateBy(hum.MoveDirection)
                        end
                    end
                else
                    connection:Disconnect()
                end
            else
                connection:Disconnect()
            end
        end)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if isNumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk() 
        else
            if connection then
                connection:Disconnect()
            end
        end
    end
})

local Player = game.Players.LocalPlayer
local originalUserId = Player.UserId
local idInput

local function setPlayerId(newId)
    if newId then
        Player.UserId = newId
    else
        if game.CreatorType == Enum.CreatorType.User then
            Player.UserId = game.CreatorId
        elseif game.CreatorType == Enum.CreatorType.Group then
            Player.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
        end
    end
end

AddTextBox(Main5u6, {
    Name = "Custom Profile in leaderboard",
    Default = "Enter ID",
    PlaceholderText = "Enter UserID",
    ClearText = true,
    Callback = function(value)
        idInput = tonumber(value)
        if Toggle:GetState() then
            setPlayerId(idInput)
        end
    end
})

local Toggle = AddToggle(Main5u6, {
    Name = "Custom UserID",
    Default = false,
    Callback = function(state)
        if state then
            if idInput then
                setPlayerId(idInput)
            else
                Toggle:SetState(false)
            end
        else
            setPlayerId(originalUserId)
        end
    end
})

getgenv().name = "Protected"
getgenv().ProtectName = false
local originalName = game.Players.LocalPlayer.Name

local function protectNameInTextLabels()
    local Plr = game.Players.LocalPlayer
    if not game:IsLoaded() then game.Loaded:Wait() end

    for _, value in ipairs(game:GetDescendants()) do 
        if value:IsA("TextLabel") then 
            local has = string.find(value.Text, Plr.Name) 
            if has then 
                value.Text = value.Text:gsub(Plr.Name, getgenv().name)
            end
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, getgenv().name)
                end
            end)
        end
    end

    game.DescendantAdded:Connect(function(value)
        if value:IsA("TextLabel") then 
            local has = string.find(value.Text, Plr.Name)
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(Plr.Name, getgenv().name)
                end
            end)
            if has then 
                value.Text = value.Text:gsub(Plr.Name, getgenv().name)
            end
        end
    end)

    local leaderboard = game:GetService("CoreGui").PlayerList.PlayerListMaster.OffsetFrame.PlayerScrollList.SizeOffsetFrame.ScrollingFrameContainer.ScrollingFrameClippingFrame.ScrollingFrame.OffsetUndoFrame
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not getgenv().ProtectName then
            connection:Disconnect()
            return
        end
        for _, v in ipairs(leaderboard:GetDescendants()) do
            if v:IsA("TextLabel") and v.Text == originalName then
                v.Text = getgenv().name
            end
        end
    end)
end

local function revertNameInTextLabels()
    for _, value in ipairs(game:GetDescendants()) do 
        if value:IsA("TextLabel") then 
            value.Text = value.Text:gsub(getgenv().name, originalName)
        end
    end
end

AddTextBox(Main5u6, {
  Name = "Custom Name",
  Default = "Enter",
  PlaceholderText = "Enter name to replace",
  ClearText = true,
  Callback = function(input)
      getgenv().name = input
      if getgenv().ProtectName then
          protectNameInTextLabels()
      end
  end
})

local ToggleWalk = AddToggle(Main5u6, {
  Name = "Name Protection",
  Default = false,
  Callback = function(state)
      getgenv().ProtectName = state
      if state then
          protectNameInTextLabels()
      else
          revertNameInTextLabels()
      end
  end
})


local getinfo = getinfo or debug.getinfo
local DEBUG = false
local Hooked = {}

local Detected, Kill

setthreadidentity(2)

for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")
    
        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc
            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc
            table.insert(Hooked, Kill)
        end
    end
end

local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...
    if Detected and LevelOrFunc == Detected then
        if DEBUG then
            SendDetailedNotification("Adonis Bypass", "Adonis has been bypassed\nDetected at: " .. os.date("%Y-%m-%d %H:%M:%S"))
        end
        return coroutine.yield(coroutine.running())
    end
    
    return Old(...)
end))

setthreadidentity(7)

local Players = game:GetService("Players")

local kickReasonsAdonis = {}
local textTable = AddTextTable(Main5u6, {Name = "log a Adonis Kick Reasons"})

local Toggle = AddToggle(Main5u6, {
    Name = "Adonis AntiCheat Bypass",
    Default = false,
    Callback = function(isEnabled)
        if isEnabled then
            if Detected then
                local Old; Old = hookfunction(Detected, function(Action, Info, NoCrash)
                    if Action ~= "_" then
                        if DEBUG then
                            SendDetailedNotification("Adonis AntiCheat Flagged",
                                "Method: " .. Action .. "\nInfo: " .. Info .. "\nDetected at: " .. os.date("%Y-%m-%d %H:%M:%S"))
                        end

                        local reason = "Detected: " .. Action .. " | Info: " .. Info
                        if not table.find(kickReasonsAdonis, reason) then
                            table.insert(kickReasonsAdonis, reason)
                            textTable.AddMessage(reason)
                            SendDetailedNotification("Reason Recorded", "Kick reason has been recorded.", 3)
                        end
                        return nil
                    else
                        SendDetailedNotification("Ignored Action", "Action was ignored: " .. Action, 3)
                    end
                    return true
                end)
            end

            if Kill then
                local Old; Old = hookfunction(Kill, function(Info)
                    if DEBUG then
                        SendDetailedNotification("Adonis AntiCheat Kill Attempt",
                            "Tried to kill (fallback): " .. Info .. "\nDetected at: " .. os.date("%Y-%m-%d %H:%M:%S"))
                    end

                    local reason = "Kill Attempt: " .. Info
                    if not table.find(kickReasonsAdonis, reason) then
                        table.insert(kickReasonsAdonis, reason)
                        textTable.AddMessage(reason)
                        SendDetailedNotification("Reason Recorded", "Kick reason has been recorded.", 3)
                    end
                    return nil
                end)
            end
        else
            if Hooked and #Hooked > 0 then
                for _, hookedFunc in ipairs(Hooked) do
                    unhookfunction(hookedFunc)
                end
            end
        end
    end
})

local kickAttempts = {}
local kickReasons = {}

local kickReasonTable = AddTextTable(Main5u6, {Name = "log a Kick Reasons"})

local ToggleKick = AddToggle(Main5u6, {
    Name = "Anti Kick",
    Default = false,
    Callback = function(isEnabled)
        local mt = getrawmetatable(game)
        local oldNameCall = mt.__namecall
        local protect = newcclosure or protect_function

        if not protect then
            game.StarterGui:SetCore("SendNotification", {
                Title = "Incompatible Exploit Warning",
                Text = "Your exploit does not support protection against stack trace errors, using fallback function.",
                Duration = 5
            })
            protect = function(f) return f end
        end

        setreadonly(mt, false)

        if isEnabled then
            mt.__namecall = protect(function(self, ...)
                local method = getnamecallmethod()
                local reason = {...}

                if method == "Kick" then
                    local reasonText = tostring(reason[1])
                    table.insert(kickAttempts, {time = os.time(), reason = reasonText})

                    if not table.find(kickReasons, reasonText) then
                        table.insert(kickReasons, reasonText)
                        kickReasonTable.AddMessage(reasonText)
                    end

                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Kick Attempt Blocked",
                        Text = "A kick attempt was intercepted and saved.\nReason: " .. reasonText,
                        Duration = 5
                    })

                    self.Kick = nil
                    return
                end
                return oldNameCall(self, ...)
            end)

            hookfunction(Players.LocalPlayer.Kick, protect(function(...)
                local reason = {...}

                local reasonText = tostring(reason[1])
                table.insert(kickAttempts, {time = os.time(), reason = reasonText})

                if not table.find(kickReasons, reasonText) then
                    table.insert(kickReasons, reasonText)
                    kickReasonTable.AddMessage(reasonText) -- ใช้ kickReasonTable แทน
                end

                game.StarterGui:SetCore("SendNotification", {
                    Title = "Kick Attempt Blocked",
                    Text = "A kick attempt was intercepted and saved.\nReason: " .. reasonText,
                    Duration = 5
                })

                Players.LocalPlayer.Kick = nil
            end))
        else
            mt.__namecall = oldNameCall
        end

        setreadonly(mt, true)
    end
})


local lastCF, stop, heartbeatConnection
local Enabled = false

local function start()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    heartbeatConnection = game:GetService('RunService').Heartbeat:Connect(function()
        if stop or not Enabled then
            return
        end
        if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
            lastCF = lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame
        end
    end)
    lplr.Character:FindFirstChildOfClass('Humanoid').RootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
        if Enabled then
            stop = true
            if lplr.Character and lplr.Character:FindFirstChildOfClass('Humanoid') and lplr.Character:FindFirstChildOfClass('Humanoid').RootPart then
                lplr.Character:FindFirstChildOfClass('Humanoid').RootPart.CFrame = lastCF
            end
            game:GetService('RunService').Heartbeat:Wait()
            stop = false
        end
    end)
end

local function setupCharacter(character)
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat game:GetService('RunService').Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid').RootPart
    if Enabled then
        start()
    end
end

lplr.CharacterAdded:Connect(function(character)
    setupCharacter(character)
end)

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        Enabled = state
        if Enabled then
            if lplr.Character then
                setupCharacter(lplr.Character)
            end
        else
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
            end
        end
    end
})


local function setCameraOcclusion()
    lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
end

setCameraOcclusion()

lp.CharacterAdded:Connect(function()
    setCameraOcclusion()
end)

AddToggle(Main5u6, {
    Name = "Camera no Occlusion",
    Default = false,
    Callback = function(value)
        if value then
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
        else
            lp.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
        end
    end
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = workspace.CurrentCamera
local tweenService = game:GetService("TweenService")
local soundId = 1445412859
local effectEnabled = false
local originalMaxZoom = player.CameraMaxZoomDistance
local originalMinZoom = player.CameraMinZoomDistance
local zoomedMaxZoom = 5
local zoomedMinZoom = 2
local followPlayer = true

local hitSound = Instance.new("Sound", player:WaitForChild("PlayerScripts"))
hitSound.SoundId = "rbxassetid://" .. soundId
hitSound.Volume = 1

local blurEffect = Instance.new("BlurEffect", camera)
blurEffect.Size = 0

local colorCorrectionEffect = Instance.new("ColorCorrectionEffect", camera)
colorCorrectionEffect.TintColor = Color3.new(1, 1, 1)
colorCorrectionEffect.Saturation = 0

local overlayFrame = Instance.new("Frame")
overlayFrame.Size = UDim2.new(1, 0, 1, 0)
overlayFrame.Position = UDim2.new(0, 0, 0, 0)
overlayFrame.BackgroundColor3 = Color3.new(0, 0, 0)
overlayFrame.BackgroundTransparency = 1
overlayFrame.Visible = true
overlayFrame.Parent = player:WaitForChild("PlayerGui")

local function followCharacter()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    game:GetService("RunService").RenderStepped:Connect(function()
        if followPlayer then
            camera.CFrame = CFrame.new(camera.CFrame.Position, humanoidRootPart.Position)
        end
    end)
end

local function triggerHitEffect()
    if not effectEnabled then return end

    game.StarterGui:SetCore("SendNotification", {
        Title = "Alert!",
        Text = "your blood, reduction",
        icon = "rbxassetid://78608769732362",
        Duration = 2,
    })

    followPlayer = true
    followCharacter()

    hitSound:Play()
    wait(0.1)

    local zoomInTweenMax = tweenService:Create(player, TweenInfo.new(0.5), {CameraMaxZoomDistance = zoomedMaxZoom})
    local zoomInTweenMin = tweenService:Create(player, TweenInfo.new(0.5), {CameraMinZoomDistance = zoomedMinZoom})
    zoomInTweenMax:Play()
    zoomInTweenMin:Play()

    tweenService:Create(blurEffect, TweenInfo.new(0.5), {Size = 24}):Play()
    wait(0.5)

    local shakeTween = tweenService:Create(camera, TweenInfo.new(0.5), {CFrame = camera.CFrame * CFrame.new(0, 0, -2)})
    shakeTween:Play()

    local twistTween = tweenService:Create(camera, TweenInfo.new(0.5), {CFrame = camera.CFrame * CFrame.Angles(0, math.rad(45), 0)})
    twistTween:Play()

    twistTween.Completed:Connect(function()
        local zoomOutTweenMax = tweenService:Create(player, TweenInfo.new(0.5), {CameraMaxZoomDistance = originalMaxZoom})
        local zoomOutTweenMin = tweenService:Create(player, TweenInfo.new(0.5), {CameraMinZoomDistance = originalMinZoom})

        zoomOutTweenMax:Play()
        zoomOutTweenMin:Play()

        followPlayer = false

        tweenService:Create(blurEffect, TweenInfo.new(0.5), {Size = 0}):Play()
        wait(0.5)
    end)

    local function changeColor()
        tweenService:Create(colorCorrectionEffect, TweenInfo.new(0.5), {TintColor = Color3.new(1, 0, 0), Saturation = -1}):Play()
        wait(0.5)
        tweenService:Create(colorCorrectionEffect, TweenInfo.new(0.5), {TintColor = Color3.new(1, 1, 1), Saturation = 0}):Play()
        wait(0.5)
    end

    local elapsedTime = 0
    while elapsedTime < 1.5 do
        changeColor()
        elapsedTime = elapsedTime + 1
    end
end

local function onHealthChanged(humanoid)
    humanoid.HealthChanged:Connect(function(newHealth)
        if effectEnabled and newHealth < humanoid.MaxHealth then
            triggerHitEffect()
        end
    end)
end

local function onCharacterAdded(newCharacter)
    character = newCharacter
    local humanoid = character:WaitForChild("Humanoid")
    onHealthChanged(humanoid)
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

local isBotActive = false

local function startBotMovement()
    while isBotActive do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)
        
        character.Humanoid.MoveToFinished:Wait()
        
        wait(1)
    end
end

AddToggle(Main5u6, {
    Name = "Bot Movement",
    Default = false,
    Callback = function(value)
        isBotActive = value
        if isBotActive then
            startBotMovement()
        end
    end
})

local Walkwithoutendtoggle = false

local function Walkwithoutend()
    while Walkwithoutendtoggle do
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        local randomX = math.random(-10, 10)
        local randomZ = math.random(-10, 10)
        local destination = character.HumanoidRootPart.Position + Vector3.new(randomX, 0, randomZ)
        
        character.Humanoid:MoveTo(destination)

        task.wait(0.1)
    end
end

AddToggle(Main5u6, {
    Name = "Walk without end",
    Default = false,
    Callback = function(value)
        Walkwithoutendtoggle = value
        if Walkwithoutendtoggle then
            Walkwithoutend()
        end
    end
})

AddToggle(Main5u6, {
    Name = "Injury effect character when hit or attack or blood reduction",
    Default = false,
    Callback = function(value) 
        effectEnabled = value
    end
})
