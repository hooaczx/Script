local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
    return tonumber(str) ~= nil or str == 'inf'
end
repeat wait() until game:IsLoaded()
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 0
getgenv().TPJpBst = 0
getgenv().TPWalk = false
getgenv().Walkspeed = game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed
getgenv().Jumppower = game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower
local player = game:GetService("Players").LocalPlayer
local controlModule = require(player.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
local mouse = game.Players.LocalPlayer:GetMouse()

Service = setmetatable({}, {
    __index = function(Self, Index)
        local NewService = game:GetService(Index)
        if NewService then
            Self[Index] = NewService
        end
        return NewService
    end
})

local localPuppet = Service.Players.LocalPlayer

function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

function Create(instance, parent, props)
    local new = Instance.new(instance, parent)
    if props then
        for prop, value in pairs(props) do
            new[prop] = value
        end
    end
    return new
end

function CreateTween(instance, prop, value, time, tweenWait)
    local tween = TweenService:Create(instance, TweenInfo.new(time, Enum.EasingStyle.Linear), {[prop] = value})
    tween:Play()
    if tweenWait then
        tween.Completed:Wait()
    end
end

local currentGameId = game.PlaceId
local jmpC

AddToggle(Main5u6, {
    Name = "Infinite Jump",
    Default = false,
    Callback = function(s)
        getgenv().InfJ = s
        if s then
            if not jmpC then
                jmpC = game:GetService("UserInputService").JumpRequest:Connect(function()
                    if getgenv().InfJ == true then
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
                    end
                end)
            end
        else
            if jmpC then
                jmpC:Disconnect()
                jmpC = nil
            end
        end
    end
})

Storage = Instance.new("Folder", game:FindService("CoreGui"))
Storage.Name = "Highlight_Storage_Player"
local cn = {}
local esplp

function toggleESP(enable, color)
    if enable then
        if esplp then return end
        esplp = RunService.Heartbeat:Connect(function()
            for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
                if plr ~= game:GetService("Players").LocalPlayer then
                    local highlight = Storage:FindFirstChild(plr.Name)
                    if not highlight then
                        highlight = Instance.new("Highlight")
                        highlight.Name = plr.Name
                        highlight.Parent = Storage
                    end
                    highlight.FillColor = _G.ESPColor or Color3.fromRGB(0, 0, 255)
                    highlight.FillTransparency = 1
                    highlight.OutlineColor = _G.ESPColor or Color3.fromRGB(0, 0, 255)
                    highlight.OutlineTransparency = 0
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    if plr.Character then
                        highlight.Adornee = plr.Character
                    end
                    if not cn[plr] then
                        cn[plr] = plr.CharacterAdded:Connect(function(newChar)
                            highlight.Adornee = newChar
                        end)
                    end
                end
            end
        end)

        if not cn["PlayerRemoving"] then
            cn["PlayerRemoving"] = game:GetService("Players").PlayerRemoving:Connect(function(plr)
                if Storage:FindFirstChild(plr.Name) then
                    Storage[plr.Name]:Destroy()
                end
                if cn[plr] then
                    cn[plr]:Disconnect()
                    cn[plr] = nil
                end
            end)
        end
    else
        if esplp then
            esplp:Disconnect()
            esplp = nil
        end
        for _, highlight in ipairs(Storage:GetChildren()) do
            highlight:Destroy()
        end
        for _, conn in pairs(cn) do
            conn:Disconnect()
        end
        cn = {}
    end
end

AddToggle(Main5u6, {
    Name = "Esp Player",
    Default = false,
    Callback = function(bool)
        _G.ESP = bool
        toggleESP(bool, _G.ESPColor or Color3.fromRGB(0, 0, 255))
    end
})

AddColorPicker(Main5u6, {
    Name = "Esp Player Color",
    Default = Color3.fromRGB(0, 0, 255),
    Callback = function(color)
        _G.ESPColor = color
        if _G.ESP then
            for _, highlight in ipairs(Storage:GetChildren()) do
                highlight.FillColor = color
                highlight.OutlineColor = color
            end
        end
    end
})

local module = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Forcefield"))()

AddTextBox(Main5u6, {
    Name = "Detection Radius",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        module.setDetectionRadius(value)
    end
})

AddColorPicker(Main5u6, {
    Name = "Detection Zone Color",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
        module.setDetectionColor(color)
    end
})

AddToggle(Main5u6, {
    Name = "Zone Visibility",
    Default = false,
    Callback = function(state)
        module.toggleVisibility(state)
    end
})

AddToggle(Main5u6, {
    Name = "LookAt Player",
    Default = false,
    Callback = function(state)
        module.toggleLookAt(state)
    end
})

AddTextBox(Main5u6, {
  Name = "Number CameraFieldOfView",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

AddToggle(Main5u6, {
  Name = "Camera FieldOfView",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter zoom distance",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value)
    if getgenv().isZoomActive then
      game.Players.LocalPlayer.CameraMaxZoomDistance = getgenv().CameraZoom
    end
  end
})

AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().isZoomActive = state
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().initialMaxZoom then
          getgenv().initialMaxZoom = player.CameraMaxZoomDistance
        end
        getgenv().zoomUpdateConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().isZoomActive then
            pcall(function()
              local zoomValue = getgenv().CameraZoom
              player.CameraMaxZoomDistance = zoomValue
            end)
          end
        end)
      else
        if getgenv().zoomUpdateConnection then
          getgenv().zoomUpdateConnection:Disconnect()
          getgenv().zoomUpdateConnection = nil
        end
        if getgenv().initialMaxZoom then
          player.CameraMaxZoomDistance = getgenv().initialMaxZoom
        end
      end
    end
  end
})

local dWS, dJP = 16, 50
local wsCon, jpCon 

AddTextBox(Main5u6, {
  Name = "WS Number",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(v)
    local s = tonumber(v)
    if s then
      getgenv().WS = s
    end
  end
})

AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(st)
    local plr = game:GetService("Players").LocalPlayer
    local hum = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
    if hum then
      if st then
        wsCon = game:GetService("RunService").Heartbeat:Connect(function()
          hum.WalkSpeed = getgenv().WS or dWS
        end)
      else
        if wsCon then wsCon:Disconnect() wsCon = nil end
        hum.WalkSpeed = dWS
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "JP Number",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(v)
    local j = tonumber(v)
    if j then
      getgenv().JP = j
    end
  end
})

AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(st)
    local plr = game:GetService("Players").LocalPlayer
    local hum = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")
    if hum then
      if st then
        jpCon = game:GetService("RunService").Heartbeat:Connect(function()
          hum.JumpPower = getgenv().JP or dJP
        end)
      else
        if jpCon then jpCon:Disconnect() jpCon = nil end
        hum.JumpPower = dJP
      end
    end
  end
})

local Tpwk, Tpwkchrtr, Tpwkdied

function setupTPWalk()
    if Tpwk then
        Tpwk:Disconnect()
        Tpwk = nil
    end
    if Tpwkchrtr then
        Tpwkchrtr:Disconnect()
        Tpwkchrtr = nil
    end
    if Tpwkdied then
        Tpwkdied:Disconnect()
        Tpwkdied = nil
    end

    function settpwk(character)
        local hum = character:WaitForChild("Humanoid")
        if not Tpwk then
            Tpwk = game:GetService("RunService").Stepped:Connect(function()
                if getgenv().TPWalk and hum and hum.Parent then
                    if hum.MoveDirection.Magnitude > 0 then
                        if getgenv().TPSpeed and tonumber(getgenv().TPSpeed) then
                            character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                        else
                            character:TranslateBy(hum.MoveDirection)
                        end
                    end
                else
                    if Tpwk then
                        Tpwk:Disconnect()
                        Tpwk = nil
                    end
                end
            end)
        end

        if not Tpwkdied then
            Tpwkdied = hum.Died:Connect(function()
                if Tpwk then
                    Tpwk:Disconnect()
                    Tpwk = nil
                end
            end)
        end
    end

    if not Tpwkchrtr then
        Tpwkchrtr = player.CharacterAdded:Connect(settpwk)
    end
    if player.Character then
        settpwk(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if tonumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk()
        else
            if Tpwk then
                Tpwk:Disconnect()
                Tpwk = nil
            end
            if Tpwkchrtr then
                Tpwkchrtr:Disconnect()
                Tpwkchrtr = nil
            end
            if Tpwkdied then
                Tpwkdied:Disconnect()
                Tpwkdied = nil
            end
        end
    end
})

getgenv().Cframewalk = 0
local flightLoop, Cframewalk = nil, false
local mode = "Nope

local function Cframewalkspeed()
    local LocalPlayer = game.Players.LocalPlayer
    local controlModule = require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local camera = workspace.CurrentCamera

    flightLoop = game:GetService("RunService").RenderStepped:Connect(function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local root = character:FindFirstChild("HumanoidRootPart")
        if not root then return end
        if not Cframewalk then return end

        local moveVec = controlModule:GetMoveVector()
        if moveVec.Magnitude > 0 then
            local camCF = camera.CFrame
            local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
            local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
            local moveWorld = (right * moveVec.X - forward * moveVec.Z).Unit * tonumber(getgenv().Cframewalk)

            if mode == "Tween Mode" then
                CreateTween(root, "CFrame", root.CFrame + moveWorld, 0.5, false)
            else
                root.CFrame = root.CFrame + moveWorld
            end
        end
    end)
end

AddDropdown(Main5u6, {
    Name = "Cframe walk Mode",
    Default = "Nope",
    Options = {"Tween Mode", "Nope"},
    Callback = function(option)
      if option then
        mode = option
      end
    end
})

AddTextBox(Main5u6, {
    Name = "Number Cframe walk",
    Default = "Enter",
    PlaceholderText = "Enter speed",
    ClearText = true,
    Callback = function(value)
        if tonumber(value) then
            getgenv().Cframewalk = tonumber(value)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Cframe walk",
    Default = false,
    Callback = function(s)
        Cframewalk = s
        if Cframewalk then
            Cframewalkspeed()
        else
            if flightLoop then
                flightLoop:Disconnect()
                flightLoop = nil
            end
        end
    end
})

local TPJpCntn, TPJp, tpar

function setupTPJpBst()
    if TPJp then
        TPJp:Disconnect()
        TPJp = nil
    end
    if TPJpCntn then
        TPJpCntn:Disconnect()
        TPJpCntn = nil
    end
    if tpar then
        tpar:Disconnect()
        tpar = nil
    end

    function setupTPJp(character)
        local hum = character:WaitForChild("Humanoid")
        if not TPJp then
            TPJp = hum.StateChanged:Connect(function(oldState, newState)
                if newState == Enum.HumanoidStateType.Jumping or newState == Enum.HumanoidStateType.Freefall then
                    local boost = getgenv().TPJpBst or 0
                    if boost > 0 then
                        if not tpar then
                            tpar = game:GetService("RunService").Heartbeat:Connect(function()
                                if hum:GetState() == Enum.HumanoidStateType.Freefall then
                                    if hum.MoveDirection.Magnitude > 0 then
                                        local currentDirection = hum.MoveDirection.Unit
                                        character:TranslateBy(currentDirection * boost)
                                    end
                                else
                                    if tpar then
                                        tpar:Disconnect()
                                        tpar = nil
                                    end
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end

    if not TPJpCntn then
        TPJpCntn = player.CharacterAdded:Connect(setupTPJp)
    end
    if player.Character then
        setupTPJp(player.Character)
    end
end

AddSlider(Main5u6, {
    Name = "StrafeJump Slowness",
    Increase = 0.01,
    MinValue = 0,
    MaxValue = 0.2,
    Default = 0,
    Callback = function(value)
        getgenv().TPJpBst = tonumber(value) or 0
        if getgenv().TPJpBst > 0 then
            setupTPJpBst()
        else
            if TPJp then
                TPJp:Disconnect()
                TPJp = nil
            end
            if TPJpCntn then
                TPJpCntn:Disconnect()
                TPJpCntn = nil
            end
            if tpar then
                tpar:Disconnect()
                tpar = nil
            end
        end
    end
})

local Player = game.Players.LocalPlayer
local originalUserId = Player.UserId
local id

function setPlayerId(newId)
    if newId then
        Player.UserId = newId
    else
        if game.CreatorType == Enum.CreatorType.User then
            Player.UserId = game.CreatorId
        elseif game.CreatorType == Enum.CreatorType.Group then
            Player.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
        end
    end
end

AddTextBox(Main5u6, {
    Name = "Custom Profile in leaderboard",
    Default = "Enter ID",
    PlaceholderText = "Enter UserID",
    ClearText = true,
    Callback = function(value)
        id = tonumber(value)
        if id then
            setPlayerId(id)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Custom UserID",
    Default = false,
    Callback = function(state)
        if state then
            if id then
                setPlayerId(id)
            end
        else
            setPlayerId(originalUserId)
        end
    end
})

getgenv().ProtectName = false
spaghettiWires = {}
originalName = nil
customName = nil

for _, player in ipairs(game.Players:GetPlayers()) do
    if player == game.Players.LocalPlayer then
        originalName = player.Name
        break
    end
end

function updateNameInTextLabels(newName)
    if not newName or not originalName then return end

    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") and value.Text then
            local has = string.find(value.Text, originalName)
            if has then
                value.Text = value.Text:gsub(originalName, newName)
            end

            local pasta = value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(originalName, newName)
                end
            end)

            table.insert(spaghettiWires, pasta)
        end
    end

    local noodle = game.DescendantAdded:Connect(function(value)
        if value:IsA("TextLabel") and value.Text then
            local has = string.find(value.Text, originalName)
            value:GetPropertyChangedSignal("Text"):Connect(function()
                if getgenv().ProtectName then
                    value.Text = value.Text:gsub(originalName, newName)
                end
            end)
            if has then
                value.Text = value.Text:gsub(originalName, newName)
            end
        end
    end)
    table.insert(spaghettiWires, noodle)
end

function revertNameInTextLabels()
    if not customName or not originalName then return end

    for _, value in ipairs(game:GetDescendants()) do
        if value:IsA("TextLabel") and value.Text then
            value.Text = value.Text:gsub(customName, originalName)
        end
    end
    for _, pasta in ipairs(spaghettiWires) do
        pasta:Disconnect()
    end
    spaghettiWires = {}
end

AddTextBox(Main5u6, {
    Name = "Custom Name",
    Default = "Enter",
    PlaceholderText = "Enter name to replace",
    ClearText = true,
    Callback = function(input)
        if input == "" or input == originalName then return end
        customName = input
        if getgenv().ProtectName then
            updateNameInTextLabels(customName)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Name Protection",
    Default = false,
    Callback = function(state)
        getgenv().ProtectName = state
        if state and customName then
            updateNameInTextLabels(customName)
        elseif not state then
            revertNameInTextLabels()
        end
    end
})

local C = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/FreeNameTag"))()

AddTextBox(Main5u6, {
    Name = "CustomNameTag",
    Default = "Enter",
    PlaceholderText = "Enter name",
    ClearText = true,
    Callback = function(value)
      C.changeName(value)
    end
})


AddToggle(Main5u6, {
    Name = "NameTag",
    Default = false,
    Callback = function(value)
      C.toggle(value)
    end
})

AddColorPicker(Main5u6, {
    Name = "NameTagColor",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
       C.changeColor(color)
    end
})

AddSlider(Main5u6, {
    Name = "NameTagheight",
    Increase = 0.1,
    MinValue = 1,
    MaxValue = 10,
    Default = 1,
    Callback = function(value)
      C.changeHeight(value)
    end
})

local M = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Dodgeplayers"))()

AddToggle(Main5u6, {
    Name = "Dodge players on touch",
    Default = false,
    Callback = function(state)
        M.toggle(state)
    end
})

AntiSit = false
hbCnAntiSit = nil
Run = true

function preventsitting(enable)
    local seatsLeft = false
    for _, v in pairs(workspace:GetDescendants()) do
        if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
            if v.Disabled ~= enable then
                v.Disabled = enable
            end
            if not v.Disabled then
                seatsLeft = true
            end
        end
    end
    return seatsLeft
end

AddToggle(Main5u6, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(value)
        if Run then
            Run = false
            return
        end

        AntiSit = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Anti Sit",
            Text = tostring(value),
            Duration = 3
        })
        
        if AntiSit then
            if not hbCnAntiSit then
                hbCnAntiSit = RunService.Heartbeat:Connect(function()
                    local seatsLeft = preventsitting(toggleAntiSit)
                    if not seatsLeft then
                        hbCnAntiSit:Disconnect()
                        hbCnAntiSit = nil
                    end
                end)
            end
        else
            if hbCnAntiSit then
                hbCnAntiSit:Disconnect()
                hbCnAntiSit = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do
                if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
                    if v.Disabled then
                        v.Disabled = false
                    end
                end
            end
        end
    end
})

local tlptCn

AddToggle(Main5u6, {
    Name = "ClickTp",
    Default = false,
    Callback = function(state)
        if state then
            tlptCn = mouse.Button1Down:Connect(function()
                if mouse.Target ~= nil then
                    local targetPosition = game.Players.LocalPlayer:GetMouse().Hit.p
                    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    humanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end)
        else
            if tlptCn then
                tlptCn:Disconnect()
                tlptCn = nil
            end
        end
    end
})

local x1 = false
local x2
local x3

AddToggle(Main5u6, {
    Name = "Touch Fling",
    Default = false,
    Callback = function(x4)
        x1 = x4
        if x1 then
          if not x2 then
            x2 = RunService.Heartbeat:Connect(function()
                local x5 = game:GetService("Players").LocalPlayer
                local x6, x7, x8, x9 = nil, nil, nil, 0.1
                x6 = x5.Character
                x7 = x6 and x6:FindFirstChild("HumanoidRootPart")

                if x7 then
                    x8 = x7.Velocity
                    x7.Velocity = x8 * 10000 + Vector3.new(0, 10000, 0)
                    RunService.RenderStepped:Wait()
                    x7.Velocity = x8
                    RunService.Stepped:Wait()
                    x7.Velocity = x8 + Vector3.new(0, x9, 0)
                    x9 = -x9
                 end
              end)
           end
        else
            if x2 then
                x2:Disconnect()
                x2 = nil
            end
        end
    end
})

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
    AddWarningMessage(Main5u6, {
        WarningMessage = "Anti Fling, Removed due to security concerns, may be banned from the game",
        ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
    })

    AddWarningMessage(Main5u6, {
        WarningMessage = "Noclip, Removed due to security concerns, may be banned from the game",
        ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
    })
else
    local abcSrvs = setmetatable({}, {__index = function(Self, Index)
        local NewService = game:GetService(Index)
        if NewService then
            Self[Index] = NewService
        end
        return NewService
    end})
    
    local localPuppet = abcSrvs.Players.LocalPlayer
    local three, zzz, two

    AddToggle(Main5u6, {
        Name = "Anti Fling",
        Default = false,
        Callback = function(state)
            if state then
                local function mgPlyrAded(Player)
                    local detectedFlag = false
                    local chter, pryPt

                    local function mgchterAded(newCharacter)
                        chter = newCharacter
                        repeat
                            wait()
                            pryPt = newCharacter:FindFirstChild("HumanoidRootPart")
                        until pryPt
                        detectedFlag = false
                    end

                    mgchterAded(Player.Character or Player.CharacterAdded:Wait())
                    if not two then 
                        two = Player.CharacterAdded:Connect(mgchterAded) 
                    end

                    if not zzz then 
                        zzz = abcSrvs.RunService.Heartbeat:Connect(function()
                            if chter and chter:IsDescendantOf(workspace) and pryPt and pryPt:IsDescendantOf(chter) then
                                if pryPt.AssemblyAngularVelocity.Magnitude > 50 or pryPt.AssemblyLinearVelocity.Magnitude > 100 then
                                    detectedFlag = true
                                    for _, v in ipairs(chter:GetDescendants()) do
                                        if v:IsA("BasePart") then
                                            v.CanCollide = false
                                            v.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                            v.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                            v.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                                        end
                                    end
                                    pryPt.CanCollide = false
                                    pryPt.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                    pryPt.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                    pryPt.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                                end
                            end
                        end)
                    end
                end

                for _, v in ipairs(abcSrvs.Players:GetPlayers()) do
                    if v ~= localPuppet then
                        mgPlyrAded(v)
                    end
                end

                if not three then 
                    three = abcSrvs.Players.PlayerAdded:Connect(mgPlyrAded) 
                end

                local lastSpot = nil
                if not abcMTbeCn then 
                    abcMTbeCn = abcSrvs.RunService.Heartbeat:Connect(function()
                        pcall(function()
                            local pryPt = localPuppet.Character and localPuppet.Character.PrimaryPart
                            if pryPt then
                                if pryPt.AssemblyLinearVelocity.Magnitude > 250 or pryPt.AssemblyAngularVelocity.Magnitude > 250 then
                                    pryPt.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                    pryPt.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                    pryPt.CFrame = lastSpot
                                elseif pryPt.AssemblyLinearVelocity.Magnitude < 50 or pryPt.AssemblyAngularVelocity.Magnitude > 50 then
                                    lastSpot = pryPt.CFrame
                                end
                            end
                        end)
                    end)
                end
            else
                if zzz then
                    zzz:Disconnect()
                    zzz = nil
                end
                if two then
                    two:Disconnect()
                    two = nil
                end
                if three then
                    three:Disconnect()
                    three = nil
                end
                if abcMTbeCn then
                    abcMTbeCn:Disconnect()
                    abcMTbeCn = nil
                end
            end
        end
    })

    local ncp, ncpDflt = {}, nil

    AddToggle(Main5u6, {
        Name = "No-Clip",
        Default = false,
        Callback = function(state)
            if state then
                if not ncpDflt then 
                    ncpDflt = game:GetService("RunService").Stepped:Connect(function()
                        local character = game.Players.LocalPlayer.Character
                        if character then
                            for _, part in ipairs(character:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    if not ncp[part] then
                                        ncp[part] = part.CanCollide
                                    end
                                    part.CanCollide = false
                                end
                            end 
                        end
                    end)
                end
            else
                if ncpDflt then
                    ncpDflt:Disconnect()
                    ncpDflt = nil
                end
                for part, canCollide in pairs(ncp) do
                    if part and part.Parent then
                        part.CanCollide = canCollide
                    end
                end
                table.clear(ncp)
            end
        end
    })
end

local antiIdle

AddToggle(Main5u6, {
    Name = "Anti-Idle",
    Default = false,
    Callback = function(state)
        if state then
            if not antiIdle then antiIdle = game:GetService("Players").LocalPlayer.Idled:Connect(function()
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
         end
        else
            if antiIdle then
                antiIdle:Disconnect()
                antiIdle = nil
            end
        end
    end
})

locktp = {
    hbtCn = nil,
    pyChgdCn = nil,
    lastCF = nil,
    stop = false,
    Enabled = false,
    chtrAdedCn = nil
}

function start()
    if not locktp.hbtCn then 
        locktp.hbtCn = Service.RunService.Heartbeat:Connect(function() 
            if locktp.stop or not locktp.Enabled then
                return
            end
            local character = localPuppet.Character
            if character and character:FindFirstChildOfClass('Humanoid') and character:FindFirstChild('HumanoidRootPart') then
                locktp.lastCF = character:FindFirstChild('HumanoidRootPart').CFrame
            end
        end)
    end

    local character = localPuppet.Character
    if character then
        local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
        if humanoidRootPart then
            if not locktp.pyChgdCn then 
                locktp.pyChgdCn = humanoidRootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
                    if locktp.Enabled then
                        locktp.stop = true
                        humanoidRootPart.CFrame = locktp.lastCF
                        Service.RunService.Heartbeat:Wait()
                        locktp.stop = false
                    end
                end)
            end
        end
    end
end

function setupCharacter(character)
    if not character then return end
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChild('HumanoidRootPart')
    
    if locktp.Enabled then
        start()
    end
end

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        locktp.Enabled = state
        if locktp.Enabled then
            if localPuppet.Character then
                setupCharacter(localPuppet.Character)
                locktp.chtrAdedCn = localPuppet.CharacterAdded:Connect(setupCharacter)
            end
        else
            if locktp.hbtCn then
                locktp.hbtCn:Disconnect()
                locktp.hbtCn = nil
            end
            if locktp.pyChgdCn then
                locktp.pyChgdCn:Disconnect()
                locktp.pyChgdCn = nil
            end
            if locktp.chtrAdedCn then
                locktp.chtrAdedCn:Disconnect()
                locktp.chtrAdedCn = nil
            end
        end
    end
})

local cm = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Cameranoclip"))()

AddDropdown(Main5u6, {
    Name = "Camera Noclip Mode",
    Default = "Not Faded",
    Options = {"Not Faded", "Faded"},
    Callback = function(option)
        cm.Dropdown(option)
    end
})

AddToggle(Main5u6, {
    Name = "Camera Noclip",
    Default = false,
    Callback = function(value)
        if cm.GetSelected() then
            cm.ToggleMode(value)
        end
    end
})

trailData = {
    enabled = false,
    trail = nil,
    a0 = nil,
    a1 = nil,
    htbtCn = nil,
    rainbowConn = nil,
    chtrAdedCn = nil
}

function createTrail(enabled)
    local plr = game:GetService("Players").LocalPlayer
    local char = plr.Character or plr.CharacterAdded:Wait()

    if enabled then
        if trailData.enabled then return end  
        trailData.enabled = true

        local hrp = char:WaitForChild("HumanoidRootPart")
        
        trailData.trail = Instance.new("Trail", hrp)
        trailData.a0 = Instance.new("Attachment", hrp)
        trailData.a0.Name = "TrailAttachment"
        trailData.a1 = Instance.new("Attachment", hrp)
        trailData.a1.Name = "TrailAttachment1"
        
        trailData.trail.Attachment0 = trailData.a0
        trailData.trail.Attachment1 = trailData.a1

        local hue = 0

        if not trailData.htbtCn then
            trailData.htbtCn = RunService.Heartbeat:Connect(function()
                if char and hrp then
                    trailData.a0.Position = Vector3.new(0, 0, 0)
                    trailData.a1.Position = Vector3.new(0, -0.2, 0)
                end
            end)
        end

        if not trailData.rainbowConn then
            trailData.rainbowConn = RunService.Heartbeat:Connect(function()
                if not trailData.enabled then return end
                hue = (hue + 1) % 360
                local keypoints = {}
                for i = 0, 4 do
                    local segmentHue = (hue + i * 72) % 360
                    local color = Color3.fromHSV(segmentHue / 360, 1, 1)
                    table.insert(keypoints, ColorSequenceKeypoint.new(i / 4, color))
                end
                trailData.trail.Color = ColorSequence.new(keypoints)
            end)
        end

        if not trailData.chtrAdedCn then
            trailData.chtrAdedCn = plr.CharacterAdded:Connect(function(newChar)
                if trailData.enabled then
                    createTrail(false)
                    createTrail(true)
                end
            end)
        end
    else
        trailData.enabled = false
        if trailData.htbtCn then
            trailData.htbtCn:Disconnect()
            trailData.htbtCn = nil
        end
        if trailData.rainbowConn then
            trailData.rainbowConn:Disconnect()
            trailData.rainbowConn = nil
        end
        if trailData.trail then
            trailData.trail:Destroy()
            trailData.trail = nil
        end
        if trailData.chtrAdedCn then
            trailData.chtrAdedCn:Disconnect()
            trailData.chtrAdedCn = nil
        end
    end
end


AddToggle(Main5u6, {
    Name = "Trail Rainbow",
    Default = false,
    Callback = function(state)
        createTrail(state)
    end
})

function ApplyLightToCharacter(character)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not rootPart then return end

    if not rootPart:FindFirstChild("Light") then
        Create("PointLight", rootPart, {
            Name = "Light",
            Range = 30,
            Brightness = 2.3,
            Color = Color3.fromRGB(255, 255, 255)
        })
    end
end

AddToggle(Main5u6, {
    Name = "Light Around Character",
    Default = false,
    Callback = function(state)
        lightEnabled = state

        player = game.Players.LocalPlayer
        character = player.Character or player.CharacterAdded:Wait()
        
        if lightEnabled then
            ApplyLightToCharacter(character)
            if lightclose then lightclose:Disconnect() lightclose = nil end
            lightclose = player.CharacterAdded:Connect(ApplyLightToCharacter)
        else
            if lightclose then lightclose:Disconnect() lightclose = nil end
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local playerLight = rootPart:FindFirstChild("Light")
                if playerLight then playerLight:Destroy() end
            end
        end
    end
})

local StatusUi = true
local heartbeatConnection = nil

function AddUi(parent, labelText, labelColor)
    if not StatusUi then
        return nil
    end

    local frame = Create("Frame", parent, {
        BackgroundColor3 = Color3.fromRGB(0, 0, 0),
        BackgroundTransparency = 0.5,
        BorderSizePixel = 0,
        Size = UDim2.new(0.14, 0, 0.07, 0),
        Draggable = true,
        Active = true
    })

    local textLabel = Create("TextLabel", frame, {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = labelText,
        TextColor3 = labelColor,
        TextScaled = true,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    Create("UIPadding", textLabel, {PaddingLeft = UDim.new(0, 5)})
    Create("UICorner", frame, {CornerRadius = UDim.new(0, 3)})

    return textLabel
end

function createFpsAndpinggui()
    if not StatusUi then
        return
    end

    local player = game.Players.LocalPlayer
    local existingUI = game:GetService("CoreGui"):FindFirstChild("FpsAndping")
    if existingUI then
        return
    end

    local screenGui = Create("ScreenGui", game:GetService("CoreGui"), {Name = "FpsAndping"})

    Create("UIListLayout", screenGui, {
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0, 10)
    })

    local fpsLabel = AddUi(screenGui, "FPS: Calculating...", Color3.fromRGB(255, 255, 0))
    local pingLabel = AddUi(screenGui, "Ping: Calculating...", Color3.fromRGB(0, 255, 255))

    local displayedFPS = 0

    heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(function()
        local targetFPS = math.floor(1 / game:GetService("RunService").RenderStepped:Wait())
        if displayedFPS < targetFPS then
            displayedFPS = displayedFPS + 1
        elseif displayedFPS > targetFPS then
            displayedFPS = displayedFPS - 1
        end
        local ping = game:GetService("Stats").PerformanceStats.Ping:GetValue()
        local targetPing = math.floor(ping)
        fpsLabel.Text = "FPS: " .. displayedFPS
        pingLabel.Text = "Ping: " .. targetPing .. " ms"
    end)

    screenGui.AncestryChanged:Connect(function()
        if not screenGui:IsDescendantOf(game) then
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end)
end

AddToggle(Main5u6, {
    Name = "FpsAndPing",
    Default = false,
    Callback = function()
        StatusUi = not StatusUi
        local existingUI = game:GetService("CoreGui"):FindFirstChild("FpsAndping")

        if StatusUi then
            if not existingUI then
                createFpsAndpinggui()
            end
        else
            if existingUI then
                existingUI:Destroy()
            end
            if heartbeatConnection then
                heartbeatConnection:Disconnect()
                heartbeatConnection = nil
            end
        end
    end
})

local t1w8y6 = 2
local z9o4p3 = false
local r5j7b1v = nil
local y4654hhvc = nil

function GetAnimationContainer(model)
	local container = model:FindFirstChildOfClass("AnimationController")
	if not container then
		local humanoid = model:FindFirstChildOfClass("Humanoid")
		if humanoid then
			container = humanoid:FindFirstChildOfClass("Animator")
		end
	end
	return container
end

function CloneAnimations(model)
	local container = GetAnimationContainer(model)
	if not container then
		return
	end
	for _, child in pairs(container:GetChildren()) do
		if (child:IsA("Animation") or child:IsA("AnimationTrack") or child:IsA("Animator") or child:IsA("Humanoid")) and child:GetAttribute("IsClone") then
			child:Destroy()
		end
	end
	for _, anim in pairs(container:GetChildren()) do
		if (anim:IsA("Animation") or anim:IsA("AnimationTrack") or anim:IsA("Animator") or anim:IsA("Humanoid")) and not anim:GetAttribute("IsClone") then
			local clonedAnim = anim:Clone()
			clonedAnim.Parent = container
			clonedAnim:SetAttribute("IsClone", true)
		end
	end
end

function g2y5x8v9(model)
	local cloneModel = Instance.new("Model")
	cloneModel.Name = "X3z5Q"
	local humanoidRoot = model:FindFirstChild("HumanoidRootPart")
	if not humanoidRoot then
	    return
	end
	local rootCFrame = humanoidRoot.CFrame
	CloneAnimations(model)
	for _, part in pairs(model:GetDescendants()) do
		if part:IsA("BasePart") and part.Transparency < 1 then
			local clonePart = part:Clone()
			for _, child in pairs(clonePart:GetChildren()) do
				if not child:IsA("SpecialMesh") and not child:IsA("Texture") and not child:IsA("Decal") then
					child:Destroy()
				end
			end
			clonePart.CanCollide = false
			clonePart.CanQuery = part.CanTouch
			clonePart.CanTouch = part.CanTouch
			clonePart.Anchored = true
			clonePart.Material = part.Material
			clonePart.CFrame = rootCFrame:ToWorldSpace(humanoidRoot.CFrame:ToObjectSpace(part.CFrame))
			clonePart.Parent = cloneModel
			local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
			local tweenProps = {Transparency = 1}
			local success, tween = pcall(function()
				return TweenService:Create(clonePart, tweenInfo, tweenProps)
			end)
			if success then
				tween:Play()
				tween.Completed:Connect(function()
					if clonePart and clonePart.Parent then
						clonePart:Destroy()
					end
				end)
			end
		end
	end
	cloneModel.Parent = workspace
	game:GetService("Debris"):AddItem(cloneModel, 1)
end

function v2o8f9d3(model)
	local humanoid = model:WaitForChild("Humanoid")
	local humanoidRoot = model:WaitForChild("HumanoidRootPart")
	if not humanoidRoot then
		return
	end
	
	local lastPos = humanoidRoot.Position
	
	r5j7b1v = RunService.Heartbeat:Connect(function()
		if not z9o4p3 then
			if r5j7b1v then
				r5j7b1v:Disconnect()
				r5j7b1v = nil
			end
			return
		end
		
		local currentRoot = model:FindFirstChild("HumanoidRootPart")
		if not currentRoot then
			return
		end
		
		local currentPos = currentRoot.Position
		local distance = (lastPos - currentPos).Magnitude
		if humanoid.MoveDirection.Magnitude > 0 and distance >= t1w8y6 then
			g2y5x8v9(model)
			lastPos = currentPos
		end
	end)
end

AddToggle(Main5u6, {
    Name = "Walk Character Afterimage Effect",
    Default = false,
    Callback = function(state)
        z9o4p3 = state
        if z9o4p3 then
            if player.Character then
                v2o8f9d3(player.Character)
            end
            y4654hhvc = player.CharacterAdded:Connect(function(character)
                if z9o4p3 then
                    v2o8f9d3(character)
                end
            end)
        else
            if r5j7b1v then
                r5j7b1v:Disconnect()
                r5j7b1v = nil
            end
            if y4654hhvc then
                y4654hhvc:Disconnect()
                y4654hhvc = nil
            end
        end
    end
})

local DayLength = 14.40
local InitialTime = 8
local IsDayCycle = false
local dayCycle
local days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}
local CurrentDay = 1
local start = tick() - (InitialTime / 24 * DayLength)
local AM = true

AddTextBox(Main5u6, {
    Name = "Day Cycle Speed",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        local number = tonumber(value)
        if number and number > 0 then
            DayLength = 14.40 / number
            start = tick() - (game.Lighting.ClockTime / 24 * DayLength)
        else
            warn("Invalid number entered for speed adjustment in Day Cycle")
        end
    end
})

AddToggle(Main5u6, {
    Name = "Day Cycle",
    Default = false,
    Callback = function(state)
        IsDayCycle = state
        if state then
            dayCycle = game:GetService("RunService").Stepped:Connect(function()
                local t = (tick() - start) / DayLength * 24
                if t >= 12 then AM = false end
                if t >= 24 then
                    start = tick()
                    CurrentDay = math.fmod(CurrentDay, 7) + 1
                    AM = true
                end
                game.Lighting.ClockTime = math.fmod(t, 24)
            end)
        else
            if dayCycle then
                dayCycle:Disconnect()
                dayCycle = nil
            end
        end
    end
})

loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/refs/heads/main/feedback"))()

local MusicPlayerTab = MakeTab({
   Name = "Music Player",
   image = "rbxthumb://type=Asset&id=107723524907022&w=420&h=420"
})
  
AddMusicPlayer(MusicPlayerTab, {
    Default = "Enter Id Music", 
    PlaceholderText = "Enter Id Music", 
    ClearText = true
})
