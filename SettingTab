local Main5u6 = MakeTab({Name = "Setting"})
local function isNumber(str)
    return tonumber(str) ~= nil or str == 'inf'
end
local camera = workspace.CurrentCamera
getgenv().TPSpeed = 0
getgenv().TPJpBst = 0
getgenv().TPWalk = false
getgenv().NV_Brightness = 0
local player = game:GetService("Players").LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = player
local players = game:GetService('Players')
local lplr = players.LocalPlayer
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
local mouse = game.Players.LocalPlayer:GetMouse()
local gui, con, isOn, fpsV = nil, nil, false, 0

Service = setmetatable({}, {
    __index = function(Self, Index)
        local NewService = game:GetService(Index)
        if NewService then
            Self[Index] = NewService
        end
        return NewService
    end
})

local localPuppet = Service.Players.LocalPlayer

function SendDetailedNotification(title, text, duration)
    game.StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

function Create(instance, parent, props)
    local new = Instance.new(instance, parent)
    if props then
        for prop, value in pairs(props) do
            new[prop] = value
        end
    end
    return new
end

function CreateTween(instance, prop, value, time, tweenWait)
    local tween = TweenService:Create(instance, TweenInfo.new(time, Enum.EasingStyle.Linear), {[prop] = value})
    tween:Play()
    if tweenWait then
        tween.Completed:Wait()
    end
end

local currentGameId = game.PlaceId
local to = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/refs/heads/main/God%20mod%20obby"))()

AddToggle(Main5u6, {
    Name = "God Mode (Bypass deadly parts in any obby[for obby game])",
    Default = false,
    Callback = function(state)
        to.toggle(state)
    end
})

local M = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/refs/heads/main/CharacterForceField"))()
local module = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Forcefield"))()

AddDropdown(Main5u6, {
    Name = "Detection Zone And ForceField Color Mode",
    Default = "Normal",
    Options = {"Normal", "Rainbow"},
    Callback = function(mode)
        M.mode(mode)
    end
})

AddTextBox(Main5u6, {
    Name = "Detection Radius",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        module.setDetectionRadius(value)
    end
})

AddToggle(Main5u6, {
    Name = "Zone Visibility",
    Default = false,
    Callback = function(state)
        module.toggleVisibility(state)
    end
})

AddToggle(Main5u6, {
    Name = "LookAt Player",
    Default = false,
    Callback = function(state)
        module.toggleLookAt(state)
    end
})

AddToggle(Main5u6, {
    Name = "Character ForceField",
    Default = false,
    Callback = function(state)
        M.tgl(state)
    end
})

AddColorPicker(Main5u6, {
    Name = "Detection Zone And Character ForceField Color",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
       M.clr(color)
    end
})

local jmpC

AddToggle(Main5u6, {
    Name = "Infinite Jump",
    Default = false,
    Callback = function(s)
        getgenv().InfJ = s
        if s then
            if not jmpC then
                jmpC = game:GetService("UserInputService").JumpRequest:Connect(function()
                    if getgenv().InfJ == true then
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
                    end
                end)
            end
        else
            if jmpC then
                jmpC:Disconnect()
                jmpC = nil
            end
        end
    end
})

local funcs = {}
funcs["G8"] = funcs["G8"] or {}
funcs["B1"] = funcs["B1"] or {}
funcs["D4"] = nil
funcs["hF"] = nil
funcs["C4"] = funcs["C4"] or {
	box = true,
	tracer = true,
	highlight = true,
	color = Color3.fromRGB(0, 255, 0),
}function CreateDrawing(type, properties)
	local obj = Drawing.new(type)
	for prop, val in pairs(properties) do
		obj[prop] = val
	end
	return obj
end function CreateHighlight(player)
	local char = player.Character
	if not funcs["hF"] or not funcs["hF"].Parent then
		funcs["hF"] = Create("Folder", (gethui and gethui()) or game:GetService("CoreGui"), {Name = "Highlight_Storage_Player"})
	end
	local Storage = funcs["hF"]
	if char then
		local highlight = Storage:FindFirstChild(player.Name)
		if highlight then
			highlight:Destroy()
		end
		if funcs["C4"].highlight then
			Create("Highlight", Storage, {
				Name = player.Name,
				Adornee = char,
				FillColor = _G.ESPColor or funcs["C4"].color,
				FillTransparency = 1,
				OutlineColor = _G.ESPColor or funcs["C4"].color,
				OutlineTransparency = 0,
				DepthMode = Enum.HighlightDepthMode.AlwaysOnTop,
				Enabled = true
			})
		end
	end
end

funcs["A1"] = function(enable)
	if enable then
		if funcs["D4"] then
			funcs["D4"]:Disconnect()
		end
		if not funcs["hF"] or not funcs["hF"].Parent then
			funcs["hF"] = Create("Folder", (gethui and gethui()) or game:GetService("CoreGui"), {Name = "Highlight_Storage_Player"})
		end
		local Storage = funcs["hF"]
		funcs["D4"] = RunService.RenderStepped:Connect(function()
			local camera = workspace.CurrentCamera
			local vs = camera.ViewportSize
			local Color = _G.ESPColor or funcs["C4"].color
			for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
				if player ~= game:GetService("Players").LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
					local hrp = player.Character.HumanoidRootPart
					local pos, visible = camera:WorldToViewportPoint(hrp.Position)
					local S = visible and pos.X >= 0 and pos.X <= vs.X and pos.Y >= 0 and pos.Y <= vs.Y
					if S then
						if not funcs["G8"][player] then
							funcs["G8"][player] = {
								Box = CreateDrawing("Square", {
									Thickness = 1,
									Filled = false,
									Color = Color,
									Visible = false,
								}),
								Name = CreateDrawing("Text", {
									Size = 14,
									Center = true,
									Outline = true,
									Color = Color,
									Visible = false,
								}),
								Tracer = CreateDrawing("Line", {
									Thickness = 1,
									Color = Color,
									Visible = false,
								}),
							}
						end
						local d = funcs["G8"][player]
						local h = math.abs(camera:WorldToViewportPoint(hrp.Position + Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, 2.5, 0)).Y)
						local w = h / 2
						d.Box.Size = Vector2.new(w, h)
						d.Box.Position = Vector2.new(pos.X - w / 2, pos.Y - h / 2)
						d.Box.Visible = funcs["C4"].box
						d.Box.Color = Color
						d.Name.Position = Vector2.new(pos.X, pos.Y - h / 2 - 18)
						d.Name.Text = player.Name
						d.Name.Visible = funcs["C4"].box
						d.Name.Color = Color
						d.Tracer.From = Vector2.new(vs.X / 2, vs.Y)
						d.Tracer.To = Vector2.new(pos.X, pos.Y)
						d.Tracer.Visible = funcs["C4"].tracer
						d.Tracer.Color = Color
						local highlight = Storage:FindFirstChild(player.Name)
						if not highlight then
							CreateHighlight(player)
							highlight = Storage:FindFirstChild(player.Name)
						end
						if highlight then
							highlight.FillColor = Color
							highlight.OutlineColor = Color
							highlight.Enabled = funcs["C4"].highlight
						end
					else
						if funcs["G8"][player] then
							for _, d in pairs(funcs["G8"][player]) do
								d.Visible = false
							end
						end
						local h = Storage:FindFirstChild(player.Name)
						if h then
							h.Enabled = false
						end
					end
					if not funcs["B1"][player] then
						funcs["B1"][player] = player.CharacterAdded:Connect(function()
							CreateHighlight(player)
						end)
					end
				else
					if funcs["G8"][player] then
						for _, d in pairs(funcs["G8"][player]) do
							d:Remove()
						end
						funcs["G8"][player] = nil
					end
					local h = Storage:FindFirstChild(player.Name)
					if h then
						h:Destroy()
					end
				end
			end
			for player, draw in pairs(funcs["G8"]) do
				if not game:GetService("Players"):FindFirstChild(player.Name) then
					for _, d in pairs(draw) do
						d:Remove()
					end
					funcs["G8"][player] = nil
					if funcs["B1"][player] then
						funcs["B1"][player]:Disconnect()
						funcs["B1"][player] = nil
					end
					local h = Storage:FindFirstChild(player.Name)
					if h then
						h:Destroy()
					end
				end
			end
		end)
	else
		if funcs["D4"] then
			funcs["D4"]:Disconnect()
			funcs["D4"] = nil
		end
		for _, conn in pairs(funcs["B1"]) do
			conn:Disconnect()
		end
		funcs["B1"] = {}
		for _, draw in pairs(funcs["G8"]) do
			for _, d in pairs(draw) do
				d:Remove()
			end
		end
		funcs["G8"] = {}
		if funcs["hF"] then
			funcs["hF"]:ClearAllChildren()
			funcs["hF"]:Destroy()
			funcs["hF"] = nil
		end
	end
end

AddToggle(Main5u6, {
	Name = "Box_ESP",
	Default = false,
	Callback = function(bool)
		funcs["C4"].box = bool
		if _G.ESP then
			for _, esp in pairs(funcs["G8"]) do
				esp.Box.Visible = bool
				esp.Name.Visible = bool
			end
		end
	end
})

AddToggle(Main5u6, {
	Name = "Tracer_ESP",
	Default = false,
	Callback = function(bool)
		funcs["C4"].tracer = bool
		if _G.ESP then
			for _, esp in pairs(funcs["G8"]) do
				esp.Tracer.Visible = bool
			end
		end
	end
})

AddToggle(Main5u6, {
	Name = "Highlight_ESP",
	Default = true,
	Callback = function(bool)
		funcs["C4"].highlight = bool
		if _G.ESP and funcs["hF"] then
			for _, h in pairs(funcs["hF"]:GetChildren()) do
				h.Enabled = bool
			end
		end
	end
})

AddToggle(Main5u6, {
	Name = "ESP Player",
	Default = false,
	Callback = function(bool)
		_G.ESP = bool
		if type(funcs["A1"]) == "function" then
			funcs["A1"](bool)
		end
	end
})

AddColorPicker(Main5u6, {
	Name = "ESP Player Color",
	Default = Color3.fromRGB(0, 255, 0),
	Callback = function(colorNew)
		_G.ESPColor = colorNew
		funcs["C4"].color = colorNew
		if _G.ESP then
			if funcs["hF"] then
				for _, highlight in pairs(funcs["hF"]:GetChildren()) do
					highlight.FillColor = colorNew
					highlight.OutlineColor = colorNew
				end
			end
			for player, draw in pairs(funcs["G8"]) do
				if draw.Box then
					draw.Box.Color = colorNew
				end
				if draw.Name then
					draw.Name.Color = colorNew
				end
				if draw.Tracer then
					draw.Tracer.Color = colorNew
				end
			end
		end
	end
})

AddSlider(Main5u6, {
    Name = "NV_Brightness",
    Increase = 0.1,
    MinValue = 0,
    MaxValue = 1.5,
    Default = NV_Brightness,
    Callback = function(value)
        getgenv().NV_Brightness = value
        local nv = game:GetService("Lighting"):FindFirstChild("NV_1hooaczx1")
        if nv and nv:IsA("ColorCorrectionEffect") then
            nv.Brightness = getgenv().NV_Brightness
        end
    end
})

AddToggle(Main5u6, {
    Name = "Night Vision",
    Default = false,
    Callback = function(Value)
        if Value then
           local nv = game:GetService("Lighting"):FindFirstChild("NV_1hooaczx1")
            if not nv then
               local NVEffect = Create("ColorCorrectionEffect", game:GetService("Lighting"), {
                    Name = "NV_1hooaczx1",
                    Brightness = getgenv().NV_Brightness,
                    Contrast = 1,
                    Saturation = -0.8,
                    TintColor = Color3.fromRGB(0, 255, 0)
                 })
            end
        else
           local nv = game:GetService("Lighting"):FindFirstChild("NV_1hooaczx1")
            if nv then
                nv:Destroy()
            end
        end
    end
})

AddTextBox(Main5u6, {
  Name = "Number CameraFieldOfView",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value) or 70
  end
})

AddToggle(Main5u6, {
  Name = "Camera FieldOfView",
  Default = false,
  Callback = function(state)
    getgenv().loopZoom = state
    local player = game:GetService("Players").LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().originalFOV then
          getgenv().originalFOV = camera.FieldOfView
        end
        getgenv().zoomConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().loopZoom then
            pcall(function()
              camera.FieldOfView = getgenv().originalFOV + (getgenv().CameraZoom or 0)
            end)
          end
        end)
      else
        if getgenv().zoomConnection then
          getgenv().zoomConnection:Disconnect()
          getgenv().zoomConnection = nil
        end
        if getgenv().originalFOV then
          camera.FieldOfView = getgenv().originalFOV
        end
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "Number CameraZoom",
  Default = "Enter",
  PlaceholderText = "Enter zoom distance",
  ClearText = true,
  Callback = function(value)
    getgenv().CameraZoom = tonumber(value)
    if getgenv().isZoomActive then
      game.Players.LocalPlayer.CameraMaxZoomDistance = getgenv().CameraZoom
    end
  end
})

AddToggle(Main5u6, {
  Name = "Camera Zoom",
  Default = false,
  Callback = function(state)
    getgenv().isZoomActive = state
    local camera = game:GetService("Workspace").CurrentCamera
    if camera then
      if state then
        if not getgenv().initialMaxZoom then
          getgenv().initialMaxZoom = player.CameraMaxZoomDistance
        end
        getgenv().zoomUpdateConnection = game:GetService("RunService").Heartbeat:Connect(function()
          if getgenv().isZoomActive then
            pcall(function()
              local zoomValue = getgenv().CameraZoom
              player.CameraMaxZoomDistance = zoomValue
            end)
          end
        end)
      else
        if getgenv().zoomUpdateConnection then
          getgenv().zoomUpdateConnection:Disconnect()
          getgenv().zoomUpdateConnection = nil
        end
        if getgenv().initialMaxZoom then
          player.CameraMaxZoomDistance = getgenv().initialMaxZoom
        end
      end
    end
  end
})

local dWS, dJP = 16, 50
local wsCon, jpCon

AddTextBox(Main5u6, {
  Name = "WS Number",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(v)
    local s = tonumber(v)
    if s then
      getgenv().WS = s
    end
  end
})

AddToggle(Main5u6, {
  Name = "WalkSpeed",
  Default = false,
  Callback = function(st)
    local plr = game:GetService("Players").LocalPlayer
    if st then
      wsCon = game:GetService("RunService").Heartbeat:Connect(function()
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
          hum.WalkSpeed = getgenv().WS or dWS
        end
      end)
    else
      if wsCon then wsCon:Disconnect() wsCon = nil end
      local char = plr.Character
      local hum = char and char:FindFirstChildOfClass("Humanoid")
      if hum then
        hum.WalkSpeed = dWS
      end
    end
  end
})

AddTextBox(Main5u6, {
  Name = "JP Number",
  Default = "Enter",
  PlaceholderText = "Enter number",
  ClearText = true,
  Callback = function(v)
    local j = tonumber(v)
    if j then
      getgenv().JP = j
    end
  end
})

AddToggle(Main5u6, {
  Name = "JumpPower",
  Default = false,
  Callback = function(st)
    local plr = game:GetService("Players").LocalPlayer
    if st then
      jpCon = game:GetService("RunService").Heartbeat:Connect(function()
        local char = plr.Character or plr.CharacterAdded:Wait()
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then
          hum.JumpPower = getgenv().JP or dJP
        end
      end)
    else
      if jpCon then jpCon:Disconnect() jpCon = nil end
      local char = plr.Character
      local hum = char and char:FindFirstChildOfClass("Humanoid")
      if hum then
        hum.JumpPower = dJP
      end
    end
  end
})

local Tpwk, Tpwkchrtr, Tpwkdied

function setupTPWalk()
    if Tpwk then
        Tpwk:Disconnect()
        Tpwk = nil
    end
    if Tpwkchrtr then
        Tpwkchrtr:Disconnect()
        Tpwkchrtr = nil
    end
    if Tpwkdied then
        Tpwkdied:Disconnect()
        Tpwkdied = nil
    end

    function settpwk(character)
        local hum = character:WaitForChild("Humanoid")
        if not Tpwk then
            Tpwk = game:GetService("RunService").Stepped:Connect(function()
                if getgenv().TPWalk and hum and hum.Parent then
                    if hum.MoveDirection.Magnitude > 0 then
                        if getgenv().TPSpeed and tonumber(getgenv().TPSpeed) then
                            character:TranslateBy(hum.MoveDirection * tonumber(getgenv().TPSpeed))
                        else
                            character:TranslateBy(hum.MoveDirection)
                        end
                    end
                else
                    if Tpwk then
                        Tpwk:Disconnect()
                        Tpwk = nil
                    end
                end
            end)
        end

        if not Tpwkdied then
            Tpwkdied = hum.Died:Connect(function()
                if Tpwk then
                    Tpwk:Disconnect()
                    Tpwk = nil
                end
            end)
        end
    end

    if not Tpwkchrtr then
        Tpwkchrtr = player.CharacterAdded:Connect(settpwk)
    end
    if player.Character then
        settpwk(player.Character)
    end
end

AddTextBox(Main5u6, {
    Name = "Number Tpwalk",
    Default = "Enter",
    PlaceholderText = "Enter number",
    ClearText = true,
    Callback = function(value)
        if tonumber(value) then
            getgenv().TPSpeed = tonumber(value)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Tpwalk",
    Default = false,
    Callback = function(s)
        getgenv().TPWalk = s
        if s then
            setupTPWalk()
        else
            if Tpwk then
                Tpwk:Disconnect()
                Tpwk = nil
            end
            if Tpwkchrtr then
                Tpwkchrtr:Disconnect()
                Tpwkchrtr = nil
            end
            if Tpwkdied then
                Tpwkdied:Disconnect()
                Tpwkdied = nil
            end
        end
    end
})

getgenv().Cframewalk = 0
local flightLoop, Cframewalk = nil, false
local mode = "Nope"

local function Cframewalkspeed()
    local LocalPlayer = game.Players.LocalPlayer
    local controlModule = require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
    local camera = workspace.CurrentCamera
    flightLoop = game:GetService("RunService").RenderStepped:Connect(function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local root = character:FindFirstChild("HumanoidRootPart")
        if not root then return end
        if not Cframewalk then return end
        local moveVec = controlModule:GetMoveVector()
        if moveVec.Magnitude > 0 then
            local camCF = camera.CFrame
            local forward = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z).Unit
            local right = Vector3.new(camCF.RightVector.X, 0, camCF.RightVector.Z).Unit
            local moveWorld = (right * moveVec.X - forward * moveVec.Z).Unit * tonumber(getgenv().Cframewalk)
            if mode == "Tween Mode" then
                CreateTween(root, "CFrame", root.CFrame + moveWorld, 0.1, false)
            else
                root.CFrame = root.CFrame + moveWorld
            end
        end
    end)
end

AddDropdown(Main5u6, {
    Name = "Cframe walk Mode",
    Default = "Nope",
    Options = {"Tween Mode", "Nope"},
    Callback = function(option)
      if option then
        mode = option
      end
    end
})

AddTextBox(Main5u6, {
    Name = "Number Cframe walk",
    Default = "Enter",
    PlaceholderText = "Enter speed",
    ClearText = true,
    Callback = function(value)
        if tonumber(value) then
            getgenv().Cframewalk = tonumber(value)
        end
    end
})

AddToggle(Main5u6, {
    Name = "Cframe walk",
    Default = false,
    Callback = function(s)
        Cframewalk = s
        if Cframewalk then
            Cframewalkspeed()
        else
            if flightLoop then
                flightLoop:Disconnect()
                flightLoop = nil
            end
        end
    end
})

local TPJpCntn, TPJp, tpar

function setupTPJpBst()
    if TPJp then
        TPJp:Disconnect()
        TPJp = nil
    end
    if TPJpCntn then
        TPJpCntn:Disconnect()
        TPJpCntn = nil
    end
    if tpar then
        tpar:Disconnect()
        tpar = nil
    end

    function setupTPJp(character)
        local hum = character:WaitForChild("Humanoid")
        if not TPJp then
            TPJp = hum.StateChanged:Connect(function(oldState, newState)
                if newState == Enum.HumanoidStateType.Jumping or newState == Enum.HumanoidStateType.Freefall then
                    local boost = getgenv().TPJpBst or 0
                    if boost > 0 then
                        if not tpar then
                            tpar = game:GetService("RunService").Heartbeat:Connect(function()
                                if hum:GetState() == Enum.HumanoidStateType.Freefall then
                                    if hum.MoveDirection.Magnitude > 0 then
                                        local currentDirection = hum.MoveDirection.Unit
                                        character:TranslateBy(currentDirection * boost)
                                    end
                                else
                                    if tpar then
                                        tpar:Disconnect()
                                        tpar = nil
                                    end
                                end
                            end)
                        end
                    end
                end
            end)
        end
    end

    if not TPJpCntn then
        TPJpCntn = player.CharacterAdded:Connect(setupTPJp)
    end
    if player.Character then
        setupTPJp(player.Character)
    end
end

AddSlider(Main5u6, {
    Name = "StrafeJump Slowness",
    Increase = 0.01,
    MinValue = 0,
    MaxValue = 0.2,
    Default = 0,
    Callback = function(value)
        getgenv().TPJpBst = tonumber(value) or 0
        if getgenv().TPJpBst > 0 then
            setupTPJpBst()
        else
            if TPJp then
                TPJp:Disconnect()
                TPJp = nil
            end
            if TPJpCntn then
                TPJpCntn:Disconnect()
                TPJpCntn = nil
            end
            if tpar then
                tpar:Disconnect()
                tpar = nil
            end
        end
    end
})

local _P, _ori, _id = game.Players.LocalPlayer, game.Players.LocalPlayer.UserId

AddTextBox(Main5u6, {
	Name = "Custom Profile in leaderboard",
	Default = "Enter ID",
	PlaceholderText = "Enter UserID",
	ClearText = true,
	Callback = function(v)
		_id = tonumber(v)
		if _id then _P.UserId = _id end
	end
})

AddToggle(Main5u6, {
	Name = "Custom UserID",
	Default = false,
	Callback = function(s)
		_P.UserId = s and _id or (_ori or (game.CreatorType == Enum.CreatorType.User and game.CreatorId) or game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id)
	end
})

getgenv()._pN = false
local _w, _oN, _cN
for _,p in ipairs(game.Players:GetPlayers()) do if p==game.Players.LocalPlayer then _oN=p.Name break end end

local function _m(n,r,s)
	s = s or getgenv()._pN
	if r then
		for _,x in ipairs(_w or {}) do x:Disconnect() end
		_w = {}
		if not (_cN and _oN) then return end
		for _,v in ipairs(game:GetDescendants()) do
			if v:IsA("TextLabel") and v.Text then
				v.Text = v.Text:gsub(_cN,_oN)
			end
		end
		return
	end
	if not (n and _oN) or not s then return end
	_cN = n
	for _,v in ipairs(game:GetDescendants()) do
		if v:IsA("TextLabel") and v.Text then
			if v.Text:find(_oN) then v.Text = v.Text:gsub(_oN,n) end
			table.insert(_w,v:GetPropertyChangedSignal("Text"):Connect(function()
				if getgenv()._pN then v.Text = v.Text:gsub(_oN,n) end
			end))
		end
	end
	table.insert(_w,game.DescendantAdded:Connect(function(v)
		if v:IsA("TextLabel") and v.Text then
			if v.Text:find(_oN) then v.Text = v.Text:gsub(_oN,n) end
			v:GetPropertyChangedSignal("Text"):Connect(function()
				if getgenv()._pN then v.Text = v.Text:gsub(_oN,n) end
			end)
		end
	end))
end

AddTextBox(Main5u6, {
	Name = "Custom Name",
	Default = "Enter",
	PlaceholderText = "Enter name to replace",
	ClearText = true,
	Callback = function(i)
		if i ~= "" and i ~= _oN then
			_m(i, false, getgenv()._pN)
		end
	end
})

AddToggle(Main5u6, {
	Name = "Name Protection",
	Default = false,
	Callback = function(s)
		getgenv()._pN = s
		if s and _cN then
			_m(_cN, false, true)
		else
			_m(nil, true)
		end
	end
})

local C = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/FreeNameTag"))()

AddTextBox(Main5u6, {
    Name = "CustomNameTag",
    Default = "Enter",
    PlaceholderText = "Enter name",
    ClearText = true,
    Callback = function(value)
      C.changeName(value)
    end
})

AddToggle(Main5u6, {
    Name = "NameTag",
    Default = false,
    Callback = function(value)
      C.toggle(value)
    end
})

AddColorPicker(Main5u6, {
    Name = "NameTagColor",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(color)
       C.changeColor(color)
    end
})

AddSlider(Main5u6, {
    Name = "NameTagheight",
    Increase = 0.1,
    MinValue = 1,
    MaxValue = 10,
    Default = 1,
    Callback = function(value)
      C.changeHeight(value)
    end
})

local f = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/AuraCharacter"))()

AddToggle(Main5u6, {
    Name = "Aura",
    Default = false,
    Callback = function(state)
        f.aura(state, CreateTween)
    end
})

AddColorPicker(Main5u6, {
    Name = "Aura Color",
    Default = _G._AuraColor or Color3.fromRGB(255, 255, 255),
    Callback = function(color)
        f.SetAuraColor(color)
    end
})

AddSlider(Main5u6, {
    Name = "Halo Height",
    Increase = 0.1,
    MinValue = 0,
    MaxValue = 10,
    Default = 0,
    Callback = function(value)
        f.SetHaloDistance(value)
    end
})

AddDropdown(Main5u6, {
    Name = "Aura Mode",
    Default = "up",
    Options = {"up", "down", "left", "right", "front", "back"},
    Callback = function(option)
        f.SetAuraMode(option)
    end
})

AddSlider(Main5u6, {
    Name = "Aura Distance",
    Increase = 0.1,
    MinValue = 0,
    MaxValue = 10,
    Default = 0,
    Callback = function(value)
        f.SetAuraDistance(value)
    end
})

local M = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Dodgeplayers"))()

AddToggle(Main5u6, {
	Name = "Dodge players on touch",
	Default = false,
	Callback = function(state)
		M.toggle(state)
	end
})

AntiSit = false
hbCnAntiSit = nil
Run = true

function preventsitting(enable)
    local seatsLeft = false
    for _, v in pairs(workspace:GetDescendants()) do
        if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
            if v.Disabled ~= enable then
                v.Disabled = enable
            end
            if not v.Disabled then
                seatsLeft = true
            end
        end
    end
    return seatsLeft
end

AddToggle(Main5u6, {
    Name = "Anti Sit",
    Default = false,
    Callback = function(value)
        if Run then
            Run = false
            return
        end

        AntiSit = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Anti Sit",
            Text = tostring(value),
            Duration = 3
        })
        
        if AntiSit then
            if not hbCnAntiSit then
                hbCnAntiSit = RunService.Heartbeat:Connect(function()
                    local seatsLeft = preventsitting(toggleAntiSit)
                    if not seatsLeft then
                        hbCnAntiSit:Disconnect()
                        hbCnAntiSit = nil
                    end
                end)
            end
        else
            if hbCnAntiSit then
                hbCnAntiSit:Disconnect()
                hbCnAntiSit = nil
            end
            for _, v in pairs(workspace:GetDescendants()) do
                if (v:IsA("Seat") or v:IsA("VehicleSeat")) and not v:FindFirstChild("SeatWeld") then
                    if v.Disabled then
                        v.Disabled = false
                    end
                end
            end
        end
    end
})

local tlptCn

AddToggle(Main5u6, {
    Name = "ClickTp",
    Default = false,
    Callback = function(state)
        if state then
            tlptCn = mouse.Button1Down:Connect(function()
                if mouse.Target ~= nil then
                    local targetPosition = game.Players.LocalPlayer:GetMouse().Hit.p
                    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    humanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end)
        else
            if tlptCn then
                tlptCn:Disconnect()
                tlptCn = nil
            end
        end
    end
})

local x1 = false
local x2
local x3

AddToggle(Main5u6, {
    Name = "Touch Fling",
    Default = false,
    Callback = function(x4)
        x1 = x4
        if x1 then
          if not x2 then
            x2 = RunService.Heartbeat:Connect(function()
                local x5 = game:GetService("Players").LocalPlayer
                local x6, x7, x8, x9 = nil, nil, nil, 0.1
                x6 = x5.Character
                x7 = x6 and x6:FindFirstChild("HumanoidRootPart")

                if x7 then
                    x8 = x7.Velocity
                    x7.Velocity = x8 * 10000 + Vector3.new(0, 10000, 0)
                    RunService.RenderStepped:Wait()
                    x7.Velocity = x8
                    RunService.Stepped:Wait()
                    x7.Velocity = x8 + Vector3.new(0, x9, 0)
                    x9 = -x9
                 end
              end)
           end
        else
            if x2 then
                x2:Disconnect()
                x2 = nil
            end
        end
    end
})

if currentGameId == 16116270224 or currentGameId == 16552821455 or currentGameId == 18984416148 then
    AddWarningMessage(Main5u6, {
        WarningMessage = "Anti Fling, Removed due to security concerns, may be banned from the game",
        ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
    })

    AddWarningMessage(Main5u6, {
        WarningMessage = "Noclip, Removed due to security concerns, may be banned from the game",
        ImageId = "rbxthumb://type=Asset&id=116573046454042&w=420&h=420"
    })
else
    local abcSrvs = setmetatable({}, {__index = function(Self, Index)
        local NewService = game:GetService(Index)
        if NewService then
            Self[Index] = NewService
        end
        return NewService
    end})
    
    local localPuppet = abcSrvs.Players.LocalPlayer
    local three, zzz, two

    AddToggle(Main5u6, {
        Name = "Anti Fling",
        Default = false,
        Callback = function(state)
            if state then
                local function mgPlyrAded(Player)
                    local detectedFlag = false
                    local chter, pryPt

                    local function mgchterAded(newCharacter)
                        chter = newCharacter
                        repeat
                            wait()
                            pryPt = newCharacter:FindFirstChild("HumanoidRootPart")
                        until pryPt
                        detectedFlag = false
                    end

                    mgchterAded(Player.Character or Player.CharacterAdded:Wait())
                    if not two then 
                        two = Player.CharacterAdded:Connect(mgchterAded) 
                    end

                    if not zzz then 
                        zzz = abcSrvs.RunService.Heartbeat:Connect(function()
                            if chter and chter:IsDescendantOf(workspace) and pryPt and pryPt:IsDescendantOf(chter) then
                                if pryPt.AssemblyAngularVelocity.Magnitude > 50 or pryPt.AssemblyLinearVelocity.Magnitude > 100 then
                                    detectedFlag = true
                                    for _, v in ipairs(chter:GetDescendants()) do
                                        if v:IsA("BasePart") then
                                            v.CanCollide = false
                                            v.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                            v.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                            v.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                                        end
                                    end
                                    pryPt.CanCollide = false
                                    pryPt.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                    pryPt.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                    pryPt.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                                end
                            end
                        end)
                    end
                end

                for _, v in ipairs(abcSrvs.Players:GetPlayers()) do
                    if v ~= localPuppet then
                        mgPlyrAded(v)
                    end
                end

                if not three then 
                    three = abcSrvs.Players.PlayerAdded:Connect(mgPlyrAded) 
                end

                local lastSpot = nil
                if not abcMTbeCn then 
                    abcMTbeCn = abcSrvs.RunService.Heartbeat:Connect(function()
                        pcall(function()
                            local pryPt = localPuppet.Character and localPuppet.Character.PrimaryPart
                            if pryPt then
                                if pryPt.AssemblyLinearVelocity.Magnitude > 250 or pryPt.AssemblyAngularVelocity.Magnitude > 250 then
                                    pryPt.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                                    pryPt.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                                    pryPt.CFrame = lastSpot
                                elseif pryPt.AssemblyLinearVelocity.Magnitude < 50 or pryPt.AssemblyAngularVelocity.Magnitude > 50 then
                                    lastSpot = pryPt.CFrame
                                end
                            end
                        end)
                    end)
                end
            else
                if zzz then
                    zzz:Disconnect()
                    zzz = nil
                end
                if two then
                    two:Disconnect()
                    two = nil
                end
                if three then
                    three:Disconnect()
                    three = nil
                end
                if abcMTbeCn then
                    abcMTbeCn:Disconnect()
                    abcMTbeCn = nil
                end
            end
        end
    })

    local ncp, ncpDflt = {}, nil

    AddToggle(Main5u6, {
        Name = "No-Clip",
        Default = false,
        Callback = function(state)
            if state then
                if not ncpDflt then 
                    ncpDflt = game:GetService("RunService").Stepped:Connect(function()
                        local character = game.Players.LocalPlayer.Character
                        if character then
                            for _, part in ipairs(character:GetDescendants()) do
                                if part:IsA("BasePart") then
                                    if not ncp[part] then
                                        ncp[part] = part.CanCollide
                                    end
                                    part.CanCollide = false
                                end
                            end 
                        end
                    end)
                end
            else
                if ncpDflt then
                    ncpDflt:Disconnect()
                    ncpDflt = nil
                end
                for part, canCollide in pairs(ncp) do
                    if part and part.Parent then
                        part.CanCollide = canCollide
                    end
                end
                table.clear(ncp)
            end
        end
    })
end

local antiIdle

AddToggle(Main5u6, {
    Name = "Anti-Idle",
    Default = false,
    Callback = function(state)
        if state then
            if not antiIdle then antiIdle = game:GetService("Players").LocalPlayer.Idled:Connect(function()
                game:GetService("VirtualUser"):CaptureController()
                game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
         end
        else
            if antiIdle then
                antiIdle:Disconnect()
                antiIdle = nil
            end
        end
    end
})

locktp = {
    hbtCn = nil,
    pyChgdCn = nil,
    lastCF = nil,
    stop = false,
    Enabled = false,
    chtrAdedCn = nil
}

function start()
    if not locktp.hbtCn then 
        locktp.hbtCn = Service.RunService.Heartbeat:Connect(function() 
            if locktp.stop or not locktp.Enabled then
                return
            end
            local character = localPuppet.Character
            if character and character:FindFirstChildOfClass('Humanoid') and character:FindFirstChild('HumanoidRootPart') then
                locktp.lastCF = character:FindFirstChild('HumanoidRootPart').CFrame
            end
        end)
    end

    local character = localPuppet.Character
    if character then
        local humanoidRootPart = character:FindFirstChild('HumanoidRootPart')
        if humanoidRootPart then
            if not locktp.pyChgdCn then 
                locktp.pyChgdCn = humanoidRootPart:GetPropertyChangedSignal('CFrame'):Connect(function()
                    if locktp.Enabled then
                        locktp.stop = true
                        humanoidRootPart.CFrame = locktp.lastCF
                        Service.RunService.Heartbeat:Wait()
                        locktp.stop = false
                    end
                end)
            end
        end
    end
end

function setupCharacter(character)
    if not character then return end
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChildOfClass('Humanoid')
    repeat Service.RunService.Heartbeat:Wait() until character:FindFirstChild('HumanoidRootPart')
    
    if locktp.Enabled then
        start()
    end
end

AddToggle(Main5u6, {
    Name = "Character Lock CFrame",
    Default = false,
    Callback = function(state)
        locktp.Enabled = state
        if locktp.Enabled then
            if localPuppet.Character then
                setupCharacter(localPuppet.Character)
                locktp.chtrAdedCn = localPuppet.CharacterAdded:Connect(setupCharacter)
            end
        else
            if locktp.hbtCn then
                locktp.hbtCn:Disconnect()
                locktp.hbtCn = nil
            end
            if locktp.pyChgdCn then
                locktp.pyChgdCn:Disconnect()
                locktp.pyChgdCn = nil
            end
            if locktp.chtrAdedCn then
                locktp.chtrAdedCn:Disconnect()
                locktp.chtrAdedCn = nil
            end
        end
    end
})

local cm = loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/main/Cameranoclip"))()

AddDropdown(Main5u6, {
    Name = "Camera Noclip Mode",
    Default = "Not Faded",
    Options = {"Not Faded", "Faded"},
    Callback = function(option)
        cm.Dropdown(option)
    end
})

AddToggle(Main5u6, {
    Name = "Camera Noclip",
    Default = false,
    Callback = function(value)
        if cm.GetSelected() then
            cm.ToggleMode(value)
        end
    end
})

trailData = {
    enabled = false,
    trail = nil,
    a0 = nil,
    a1 = nil,
    htbtCn = nil,
    rainbowConn = nil,
    chtrAdedCn = nil
}

function createTrail(enabled)
    local plr = game:GetService("Players").LocalPlayer
    local char = plr.Character or plr.CharacterAdded:Wait()

    if enabled then
        if trailData.enabled then return end  
        trailData.enabled = true

        local hrp = char:WaitForChild("HumanoidRootPart")
        
        trailData.trail = Instance.new("Trail", hrp)
        trailData.a0 = Instance.new("Attachment", hrp)
        trailData.a0.Name = "TrailAttachment"
        trailData.a1 = Instance.new("Attachment", hrp)
        trailData.a1.Name = "TrailAttachment1"
        
        trailData.trail.Attachment0 = trailData.a0
        trailData.trail.Attachment1 = trailData.a1

        local hue = 0

        if not trailData.htbtCn then
            trailData.htbtCn = RunService.Heartbeat:Connect(function()
                if char and hrp then
                    trailData.a0.Position = Vector3.new(0, 0, 0)
                    trailData.a1.Position = Vector3.new(0, -0.2, 0)
                end
            end)
        end

        if not trailData.rainbowConn then
            trailData.rainbowConn = RunService.Heartbeat:Connect(function()
                if not trailData.enabled then return end
                hue = (hue + 1) % 360
                local keypoints = {}
                for i = 0, 4 do
                    local segmentHue = (hue + i * 72) % 360
                    local color = Color3.fromHSV(segmentHue / 360, 1, 1)
                    table.insert(keypoints, ColorSequenceKeypoint.new(i / 4, color))
                end
                trailData.trail.Color = ColorSequence.new(keypoints)
            end)
        end

        if not trailData.chtrAdedCn then
            trailData.chtrAdedCn = plr.CharacterAdded:Connect(function(newChar)
                if trailData.enabled then
                    createTrail(false)
                    createTrail(true)
                end
            end)
        end
    else
        trailData.enabled = false
        if trailData.htbtCn then
            trailData.htbtCn:Disconnect()
            trailData.htbtCn = nil
        end
        if trailData.rainbowConn then
            trailData.rainbowConn:Disconnect()
            trailData.rainbowConn = nil
        end
        if trailData.trail then
            trailData.trail:Destroy()
            trailData.trail = nil
        end
        if trailData.chtrAdedCn then
            trailData.chtrAdedCn:Disconnect()
            trailData.chtrAdedCn = nil
        end
    end
end


AddToggle(Main5u6, {
    Name = "Trail Rainbow",
    Default = false,
    Callback = function(state)
        createTrail(state)
    end
})

function ApplyLightToCharacter(character)
    local rootPart = character:WaitForChild("HumanoidRootPart", 5)
    if not rootPart then return end

    if not rootPart:FindFirstChild("Light") then
        Create("PointLight", rootPart, {
            Name = "Light",
            Range = 30,
            Brightness = 2.3,
            Color = Color3.fromRGB(255, 255, 255)
        })
    end
end

AddToggle(Main5u6, {
    Name = "Light Around Character",
    Default = false,
    Callback = function(state)
        lightEnabled = state

        player = game.Players.LocalPlayer
        character = player.Character or player.CharacterAdded:Wait()
        
        if lightEnabled then
            ApplyLightToCharacter(character)
            if lightclose then lightclose:Disconnect() lightclose = nil end
            lightclose = player.CharacterAdded:Connect(ApplyLightToCharacter)
        else
            if lightclose then lightclose:Disconnect() lightclose = nil end
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local playerLight = rootPart:FindFirstChild("Light")
                if playerLight then playerLight:Destroy() end
            end
        end
    end
})

function addui(on)
	if on then
		if isOn then return end
		isOn = true
		gui = Create("ScreenGui", (gethui and gethui()) or game:GetService("CoreGui"), {
			Name = "fap_1hooaczx1", ResetOnSpawn = false, DisplayOrder = math.huge
		})
		Create("UIListLayout", gui, {SortOrder=Enum.SortOrder.LayoutOrder, FillDirection=Enum.FillDirection.Vertical, Padding=UDim.new(0,4)})
		local function mkframe(txt,col)
			local f=Create("Frame",gui,{
				Size=UDim2.new(0,160,0,24),
				BackgroundColor3=Color3.new(0,0,0),
				BackgroundTransparency=0.6,
				BorderSizePixel=0,
				Active=true,
				Draggable=true
			})
			local l=Create("TextLabel",f,{
				Size=UDim2.new(1,0,1,0),
				BackgroundTransparency=1,
				TextColor3=col,
				Text=txt,
				Font=Enum.Font.Gotham,
				TextScaled=true,
				TextXAlignment=Enum.TextXAlignment.Left
			})
			Create("UIPadding",l,{PaddingLeft=UDim.new(0,5)})
			Create("UICorner",f,{CornerRadius=UDim.new(0,4)})
			return f,l
		end
		local _,fpsLabel=mkframe("fps: ...",Color3.fromRGB(255,255,0))
		local _,pingLabel=mkframe("ping: ...",Color3.fromRGB(0,255,255))
		local posBtn = Create("TextButton", gui, {
			Size=UDim2.new(0,160,0,24),
			BackgroundColor3=Color3.new(0,0,0),
			BackgroundTransparency=0.6,
			BorderSizePixel=0,
			AutoButtonColor=false,
			TextColor3=Color3.new(1,1,1),
			Text="X: ? Y: ? Z: ?",
			Font=Enum.Font.Gotham,
			TextScaled=true,
			TextXAlignment=Enum.TextXAlignment.Left,
			Active=true,
			Draggable=true
		})
		Create("UIPadding",posBtn,{PaddingLeft=UDim.new(0,5)})
		Create("UICorner",posBtn,{CornerRadius=UDim.new(0,4)})
		posBtn.MouseButton1Click:Connect(function()
			local plr = game.Players.LocalPlayer
			local hrp = plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
        	if hrp then
	       	local p = hrp.Position
	       	local x, y, z = string.format("%.2f", p.X), string.format("%.2f", p.Y), string.format("%.2f", p.Z)
	       	local code = string.format([[local c = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
               local h = c:WaitForChild("HumanoidRootPart")
               h.CFrame = CFrame.new(%s, %s, %s)
               ]], x, y, z)
		       setclipboard(code)
		   	game.StarterGui:SetCore("SendNotification", {
					Title="Copy", Text="Copied position!", Duration=3
		   	})
			end
		end)
		con = game:GetService("RunService").RenderStepped:Connect(function()
			local fpsTarget = math.floor(1 / game:GetService("RunService").RenderStepped:Wait())
			if fpsV < fpsTarget then fpsV+=1 elseif fpsV > fpsTarget then fpsV-=1 end
			local pstat = game:GetService("Stats"):FindFirstChild("PerformanceStats")
			local pingVal = pstat and pstat:FindFirstChild("Ping") and math.floor(pstat.Ping:GetValue()) or 0
			fpsLabel.Text = "fps: "..fpsV
			pingLabel.Text = "ping: "..pingVal.."ms"
			local plr = game.Players.LocalPlayer
			local hrp = plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				local p=hrp.Position
				posBtn.Text=string.format("X: %s Y: %s Z: %s", string.format("%.0f", p.X), string.format("%.0f", p.Y), string.format("%.0f", p.Z))
			else
				posBtn.Text="X: ? Y: ? Z: ?"
			end
		end)
		gui.AncestryChanged:Connect(function()
			if not gui:IsDescendantOf(game) then
				if con then con:Disconnect() con=nil end
				isOn=false
			end
		end)
	else
		if not isOn then return end
		isOn=false
		if con then con:Disconnect() con=nil end
		if gui then gui:Destroy() gui=nil end
	end
end

AddToggle(Main5u6, {
	Name="FpsAndPingAndPos",
	Default=false,
	Callback=addui
})

local t1w8y6 = 2
local z9o4p3 = false
local r5j7b1v = nil
local y4654hhvc = nil

function GetAnimationContainer(model)
	local container = model:FindFirstChildOfClass("AnimationController")
	if not container then
		local humanoid = model:FindFirstChildOfClass("Humanoid")
		if humanoid then
			container = humanoid:FindFirstChildOfClass("Animator")
		end
	end
	return container
end

function CloneAnimations(model)
	local container = GetAnimationContainer(model)
	if not container then
		return
	end
	for _, child in pairs(container:GetChildren()) do
		if (child:IsA("Animation") or child:IsA("AnimationTrack") or child:IsA("Animator") or child:IsA("Humanoid")) and child:GetAttribute("IsClone") then
			child:Destroy()
		end
	end
	for _, anim in pairs(container:GetChildren()) do
		if (anim:IsA("Animation") or anim:IsA("AnimationTrack") or anim:IsA("Animator") or anim:IsA("Humanoid")) and not anim:GetAttribute("IsClone") then
			local clonedAnim = anim:Clone()
			clonedAnim.Parent = container
			clonedAnim:SetAttribute("IsClone", true)
		end
	end
end

function g2y5x8v9(model)
	local cloneModel = Instance.new("Model")
	cloneModel.Name = "X3z5Q"
	local humanoidRoot = model:FindFirstChild("HumanoidRootPart")
	if not humanoidRoot then
	    return
	end
	local rootCFrame = humanoidRoot.CFrame
	CloneAnimations(model)
	for _, part in pairs(model:GetDescendants()) do
		if part:IsA("BasePart") and part.Transparency < 1 then
			local clonePart = part:Clone()
			for _, child in pairs(clonePart:GetChildren()) do
				if not child:IsA("SpecialMesh") and not child:IsA("Texture") and not child:IsA("Decal") then
					child:Destroy()
				end
			end
			clonePart.CanCollide = false
			clonePart.CanQuery = part.CanTouch
			clonePart.CanTouch = part.CanTouch
			clonePart.Anchored = true
			clonePart.Material = part.Material
			clonePart.CFrame = rootCFrame:ToWorldSpace(humanoidRoot.CFrame:ToObjectSpace(part.CFrame))
			clonePart.Parent = cloneModel
			local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
			local tweenProps = {Transparency = 1}
			local success, tween = pcall(function()
				return TweenService:Create(clonePart, tweenInfo, tweenProps)
			end)
			if success then
				tween:Play()
				tween.Completed:Connect(function()
					if clonePart and clonePart.Parent then
						clonePart:Destroy()
					end
				end)
			end
		end
	end
	cloneModel.Parent = workspace
	game:GetService("Debris"):AddItem(cloneModel, 1)
end

function v2o8f9d3(model)
	local humanoid = model:WaitForChild("Humanoid")
	local humanoidRoot = model:WaitForChild("HumanoidRootPart")
	if not humanoidRoot then
		return
	end
	
	local lastPos = humanoidRoot.Position
	
	r5j7b1v = RunService.Heartbeat:Connect(function()
		if not z9o4p3 then
			if r5j7b1v then
				r5j7b1v:Disconnect()
				r5j7b1v = nil
			end
			return
		end
		
		local currentRoot = model:FindFirstChild("HumanoidRootPart")
		if not currentRoot then
			return
		end
		
		local currentPos = currentRoot.Position
		local distance = (lastPos - currentPos).Magnitude
		if humanoid.MoveDirection.Magnitude > 0 and distance >= t1w8y6 then
			g2y5x8v9(model)
			lastPos = currentPos
		end
	end)
end

AddToggle(Main5u6, {
    Name = "Walk Character Afterimage Effect",
    Default = false,
    Callback = function(state)
        z9o4p3 = state
        if z9o4p3 then
            if player.Character then
                v2o8f9d3(player.Character)
            end
            y4654hhvc = player.CharacterAdded:Connect(function(character)
                if z9o4p3 then
                    v2o8f9d3(character)
                end
            end)
        else
            if r5j7b1v then
                r5j7b1v:Disconnect()
                r5j7b1v = nil
            end
            if y4654hhvc then
                y4654hhvc:Disconnect()
                y4654hhvc = nil
            end
        end
    end
})

local _d, _i, _e, _c, _x = 14.4, 8, false, nil, 1
local _s = tick() - (_i / 24 * _d)
local _a = true
local _w = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}

AddTextBox(Main5u6, {
	Name = "Day Cycle Speed",
	Default = "Enter",
	PlaceholderText = "Enter number",
	ClearText = true,
	Callback = function(_v)
		local _n = tonumber(_v)
		if _n and _n > 0 then
			_d = 14.4 / _n
			_s = tick() - (game.Lighting.ClockTime / 24 * _d)
		else
			warn("Invalid number entered")
		end
	end
})

AddToggle(Main5u6, {
	Name = "Day Cycle",
	Default = false,
	Callback = function(_z)
		_e = _z
		if _z then
			_c = game:GetService("RunService").Stepped:Connect(function()
				local _t = (tick() - _s) / _d * 24
				if _t >= 12 then _a = false end
				if _t >= 24 then
					_s = tick()
					_x = (_x % 7) + 1
					_a = true
				end
				game.Lighting.ClockTime = _t % 24
			end)
		elseif _c then
			_c:Disconnect()
			_c = nil
		end
	end
})

loadstring(game:HttpGet("https://raw.githubusercontent.com/hooaczx/Script/refs/heads/main/feedback"))()

local MusicPlayerTab = MakeTab({
   Name = "Music Player",
   image = "rbxthumb://type=Asset&id=107723524907022&w=420&h=420"
})
  
AddMusicPlayer(MusicPlayerTab, {
    Default = "Enter Id Music", 
    PlaceholderText = "Enter Id Music", 
    ClearText = true
})
