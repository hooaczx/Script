local aimbotEnabled = false
local aimbotToggleKey = Enum.KeyCode.E -- Key to toggle aimbot
local aimbotFOV = 50 -- Lower FOV for more precise targeting
local aimbotMaxRange = 1000

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = game.Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local FOVCircle = Drawing.new("Circle")
FOVCircle.Color = Color3.fromRGB(255, 255, 255) -- Change FOV circle color to white
FOVCircle.Thickness = 2
FOVCircle.NumSides = 32
FOVCircle.Radius = aimbotFOV
FOVCircle.Visible = false -- Initially hidden

local SnapLine = Drawing.new("Line")
SnapLine.Color = Color3.fromRGB(255, 255, 255) -- Change snap line color to white
SnapLine.Thickness = 2
SnapLine.Visible = false -- Initially hidden

local HeadDot = Drawing.new("Circle")
HeadDot.Color = Color3.fromRGB(255, 255, 255) -- Change head dot color to white
HeadDot.Thickness = 2
HeadDot.NumSides = 32
HeadDot.Radius = 5
HeadDot.Visible = false -- Initially hidden

-- Function to update FOV circle position and size
local function updateFOVCircle()
    local viewportSize = Camera.ViewportSize
    FOVCircle.Position = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2) -- Center the circle in the middle of the screen
    FOVCircle.Radius = aimbotFOV
end

-- Function to update snap line position
local function updateSnapLine(targetPosition)
    local viewportSize = Camera.ViewportSize
    SnapLine.From = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2) -- Start from the center of the screen
    local screenPoint, onScreen = Camera:WorldToViewportPoint(targetPosition)
    SnapLine.To = Vector2.new(screenPoint.X, screenPoint.Y)
    SnapLine.Visible = true
end

-- Function to update head dot position
local function updateHeadDot(targetPosition)
    local screenPoint, onScreen = Camera:WorldToViewportPoint(targetPosition)
    HeadDot.Position = Vector2.new(screenPoint.X, screenPoint.Y)
    HeadDot.Visible = true
end

-- Function to check if target is visible
local function isTargetVisible(targetPart)
    -- Implement your visibility check logic here
    return true
end

-- Function to highlight players within FOV
local function highlightPlayersInFOV()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local distance = (head.Position - LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if distance <= aimbotMaxRange then
                local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
                local viewportSize = Camera.ViewportSize
                local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)).magnitude
                if distanceFromCenter <= aimbotFOV and isTargetVisible(head) then
                    -- Highlight the player
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "Highlight"
                    highlight.Adornee = player.Character
                    highlight.Parent = player.Character:FindFirstChild("HumanoidRootPart")
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                else
                    -- Remove highlight if player is outside FOV
                    local highlightInstance = player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight")
                    if highlightInstance then
                        highlightInstance:Destroy()
                    end
                end
            end
        end
    end
end

-- Toggle aimbot on key press
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == aimbotToggleKey then
        aimbotEnabled = not aimbotEnabled
        FOVCircle.Visible = aimbotEnabled
        SnapLine.Visible = aimbotEnabled
        HeadDot.Visible = aimbotEnabled
        print("Aimbot toggled: " .. tostring(aimbotEnabled))
    end
end)

-- Aimbot logic
RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        updateFOVCircle()
        highlightPlayersInFOV()
        
        local closestPlayer = nil
        local shortestDistance = math.huge
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                local head = player.Character.Head
                local distance = (head.Position - LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                if distance < shortestDistance and distance <= aimbotMaxRange then
                    local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
                    local viewportSize = Camera.ViewportSize
                    local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)).magnitude
                    if distanceFromCenter <= aimbotFOV and isTargetVisible(head) then
                        shortestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end

        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
            local head = closestPlayer.Character.Head
            updateSnapLine(head.Position)
            updateHeadDot(head.Position)
            local targetCFrame = CFrame.new(Camera.CFrame.Position, head.Position)
            Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, 0.9) -- Stronger lock-on with increased lerp value
        else
            SnapLine.Visible = false
            HeadDot.Visible = false
        end
    else
        SnapLine.Visible = false
        HeadDot.Visible = false
        
        -- Remove all highlights when aimbot is disabled
        for _, player in ipairs(Players:GetPlayers()) do
            local highlightInstance = player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight")
            if highlightInstance then
                highlightInstance:Destroy()
            end
        end
    end
end)
